'use strict';

//=======================================================
// Declare app level module which depends on views, and components
//=======================================================
angular.module('grades', [
	// Angular optional
	'ngRoute',
	'ngAnimate',

	// 3rd Party
	'ui.bootstrap',
	'cfp.hotkeys',
	'ngMdIcons',
	'ui.scrollToTopWhen',

	// Mine: Generic
	'pubsub-service',
	'mathJax',
	'sliderMenu',
	'kbBootstrap',
	'kbGraph',

	// Mine: Semi-reusable
	'state-service',
	'action-service',		// Cloud save

	// Mine: Project-specific
	'problemType',
	'comm-service',
	'kb.filterBar',
	'partials',				// "Compiled" templates
])

//=======================================================
// Route list
//=======================================================
.config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {

	$locationProvider.html5Mode(true);

	// Routing Table
	$routeProvider.when('/change', {
		templateUrl: 'Change/change.html',
		controller: 'ChangeCtrl',
		controllerAs: 'change'
	});

	// Routing Table
	$routeProvider.when('/graph/:type', {
		templateUrl: 'Graph/graph.html',
		controller: 'GraphCtrl',
		controllerAs: 'graph'
	});

	// Default
	$routeProvider.otherwise({redirectTo: '/graph/1'});
}])

//=======================================================
// Disable sanitization. We'll take care of it on the back end
//=======================================================
.config(["$sceProvider", function($sceProvider) {
    $sceProvider.enabled(false);
}])

//=======================================================
//=======================================================
.config(["$httpProvider", function($httpProvider) {
	$httpProvider.defaults.withCredentials = true;
}])

//=======================================================
// This is a hack to add the ability to change routes
// without reloading the controller.
//
// $location.path now accepts a second parameter.
// If false, it will change the URL without rerouting.
//=======================================================
.run(['$route', '$rootScope', '$location', function ($route, $rootScope, $location) {
    var original = $location.path;
    $location.path = function (path, reload) {
        if (reload === false) {
            var lastRoute = $route.current;
            var un = $rootScope.$on('$locationChangeSuccess', function () {
                $route.current = lastRoute;
                un();
            });
        }
        return original.apply($location, [path]);
    };
}]);
'use strict';

//===========================================================================================
// Maintains an ordered list of actions that take place on a model. This allows
// persistence (saving) and undo, and possibly more.
//===========================================================================================
angular.module('action-service', ['pubsub-service']);

'use strict';

//===========================================================================================
// REST client and Communications Manager module
//===========================================================================================
angular.module('comm-service', []);

'use strict';

//===========================================================================================
// Problem Type Manager -- Allowes each problem type to handle its own display
//===========================================================================================
angular.module('problemType', []);

'use strict';

//===========================================================================================
//===========================================================================================
angular.module('grades')

.controller('ChangeCtrl', ["Problems", "State", "PubSub", "$scope", function(Problems, State, PubSub, $scope) {

	var self = this;

	self.problems = Problems.get();		// Maintain a copy of the model

	initMetaData();
	initModel();

	//=======================================================
	//
	//=======================================================
	self.filterQs = function(status)
	{
		return (State.get('pendFilter') && !status);
	}

	//=======================================================
	//=======================================================
	self.setPoints = function(prob, isValid)
	{
		if (!isValid)
			return;

		var oldPend = prob.showPend;

		prob = Problems.setPoints(prob.id, prob.pts);
		if (!prob)
			return;

		// Update sandbox
		prob.pts = prob.score;
		prob.showPend = oldPend;

		// Update internal model
		var idx = prob.id;			// Slightly iffy. This is a bold assumption.
		self.problems[idx] = prob;	// Prop is a clone of self.problems[idx], so we have to update it. It feels like we could end up with a memory leak here.
	}

	//=======================================================
	//=======================================================
	self.getIcon = function(prob)
	{
		// Amazingly, this gets called 5 times per problem on page init
		// It's called once per change or blur, for every single problem
		var map = {
			pending: 'schedule',
			correct: 'check_circle',
			'new': 'radio_button_off',
			incorrect: 'cancel',

			'default': 'cancel'
		};

		return map[prob.status] || map['default'];
	}

	//=======================================================
	// Copy the point value to a safe scratchpad area
	//=======================================================
	function initModel()
	{
		for (var i = 0, len = self.problems.length; i < len; i++)
		{
			self.problems[i].pts = self.problems[i].score;
			self.problems[i].showPend = self.problems[i].isPending;
		}
	}

	//=======================================================
	//
	//=======================================================
	function initMetaData()
	{
		self.mode = Problems.mode();

		if (self.mode === 'multiProblem')
		{
			self.title = self.problems[0].uname.first + ' ' + self.problems[0].uname.last + ', ' + Problems.title();
		}
		else
		{
			self.title = Problems.title() + ', Question ' + self.problems[0].qNum;
		}
	}

}]);

'use strict';

//===========================================================================================
// Monitors for error conditions, and displays the appropriate warning and error messages.
//
// Conditions often have a Retry ability, which needs to be communicated or registered on error.
//===========================================================================================
angular.module('kb.filterBar', [])

.constant('kbFilterBar', {
	path: 'Graph/'
})

.directive('filterBar', ["kbFilterBar", function(kbFilterBar) {

	return {
		restrict: 'E',
		scope: {
			model: '=ngModel',
			type: '@',
			header: '@',

			model2: '=ngModel2',
			type2: '@',
			header2: '@',

			options: '=',

//			curfilter1: '=',
			curfilter2: '=',
		},
		controller: 'FilterBarCtrl as ctrl',
		bindTo: true,
		replace: true,
		templateUrl: kbFilterBar.path + 'filter-bar.html',

/*
		resolve: {
			id: function() {return assign.id},		// To keep track of what we're editing
			assigned: function() {return assign.assigned},
			due: function() {return assign.due},
			students: function() {return students},
		}
*/

	};
}])

//===========================================================================================
.controller('FilterBarCtrl', ["PubSub", "$scope", function(PubSub, $scope) {

	var self = this;

	// Bad!
//	self.curfilter1 = $scope.curfilter1;
	self.curfilter2 = $scope.curfilter2;

	//=======================================================
	//=======================================================
	self.setFilter1 = function()
	{
		PubSub.publish('filter1', self.curfilter1);
	}

	//=======================================================
	//=======================================================
	self.setFilter2 = function()
	{
		PubSub.publish('filter2', self.curfilter2);
	}

}]);
'use strict';

//===========================================================================================
//===========================================================================================
angular.module('grades')

.controller('GraphCtrl', ["$location", "$routeParams", "$scope", "PubSub", function($location, $routeParams, $scope, PubSub) {

	var self = this;

/*
	Assignments
	-Assignments Overview
	-Assignment Details (formerly List)
	-Class Details
	-Problems Per Assignment
	-Problems Per Student
	-Assignment Intervention (this would be the preset filters that we've talked about in earlier meetings)

	Standards
	-Standards Overview
	-Standard Details
	-Class Details
	-Problems Per Standard
	-Problems Per Student
	-Standards Intervention (this would be the preset filters that we've talked about in earlier meetings)
*/
	self.reports = [
/*
		{id: 0, title: "Performance", options: [
			{id: 'perov', text: "Overview", template: "StudentSummary.html", filter: {section: true}, instructions: "Click a student to view details."},
			{id: 'pertr', text: "Trend", filter: {compare: true}, template: "StudentTrend.html"},
			{id: 'stdt', text: "Student Details", noFilters: true, studentSelect: true, template: "StudentDetails.html", instructions:"Click an assignment type or standard to view matching assignments."},
		]},
*/
		{id: 1, title: "Assignments", options: [
/*
			{id: 'perov', text: "Overview", template: "StudentSummary.html", filter: {section: true}, instructions: "Click a student to view details."},
			{id: 'aspe', text: "Pending", icon: 'glyphicon-alert', noFilters: true, template: "Pending.html", instructions: "Click an assignment to set or adjust grades and view student submissions."},
			{id: 'asli', text: "Assignment List", template: "AssignList.html", filter: {compare: true}, instructions: "Click an assignment to view student scores."},
			{id: 'ascls', text: "Class Scores", template: "AssignClass.html", filter: {section: true}, instructions: "Click a student to see their submissions and modify their scores."},
			{id: 'assts', text: "Student Scores", template: "AssignStudents.html", filter: {section: false}, instructions: "Click an assignment to see submissions and modify scores."},
			{id: 'asms', text: "Missing assignments", template: "AssignMissing.html", filter: {section: true}, instructions: "Click a student to view details."},
*/
			{id: 'perov', text: "Overview", template: "AssignOverview.html", filter: {section: false, noType: true, compare: true}, instructions: "Click a bar to view matching assignments."},
//			{id: 'aslia', text: "List", template: "AssignList.html", filter: {compare: true}, instructions: "Click an assignment to view student scores."},
			{id: 'aslib', text: "Assignment List", template: "AssignCategory.html", filter: {compare: true, noType: true}, instructions: ""},
			{id: 'ascls', text: "Student List", template: "AssignClass.html", filter: {section: true}, instructions: ""},
//			{id: 'asstd', text: "Standard List", template: "AssignStandards.html", filter: {compare: true, noType: true}, instructions: ""},
			{id: 'asprob', text: "Problem List", template: "AssignProblems.html", filter: {noStandard: true}, instructions: ""},
		]},
		{id: 2, title: "Standards", options: [
			{id: 'stdov', text: "Overview", template: "StandardOverview.html", filter: {noStandard: true, compare: true}, instructions: "Click a standard to view domain."},
//			{id: 'stddeta', text: "By Domain (A)", template: "StandardDetail.html", filter: {noStandard: true, compare: true}, instructions: "Click a standard to view standard performance."},
			{id: 'stddet', text: "Standard List", template: "StandardDetailB.html", filter: {noStandard: true, compare: true}, instructions: ""},
			{id: 'stdcls', text: "Student List", template: "StandardClass.html", filter: {section: true}, instructions: ""},
//			{id: 'stdprob', text: "Problems By Standard", template: "ProblemsByStandard.html", filter: {noStandard: true}, instructions: ""},
			{id: 'probpg', text: "Problem List", template: "ProblemExplorer.html", filter: {noStandard: true}, instructions: ""},

/*
			{id: 'stdco', text: "Performance", noFilters: true, template: 'StdCoverage.html', instructions: "Click a standard to show matching assignments."},
			{id: 'instd', text: "Intervention", template: "InterStandards.html", instructions: "Click on a standard to view matching assignments."},
*/
		]},
/*
		{id: 4, title: "Intervention", options: [
			{id: 'instu', text: "Students", noFilters: true, template: "InterStudents.html", instructions: "Click a student name to view details."},
			{id: 'inas', text: "Assignments", noFilters: true, template: "InterAssigns.html", instructions: "Click an assignment to view student scores."},
		]},
*/

		{id: 5, title: "Student Reports", options: [
			{id: 'stdt', text: "Overview", noFilters: true, studentSelect: true, template: "StudentDetails.html", instructions:"Click an assignment type or standard to view matching assignments."},
		]},

	];


	self.assign1 = [
		{name: 'Cray, Cathy', grade: 81, missing: 1},
		{name: 'McGee, Bubba', grade: 'X', missing: 6},
		{name: 'Smith, Alex', grade: 59, missing: 3},
		{name: 'Thompson, Alice', grade: 68, missing: 12},
		{name: 'Williams, Wendy', grade: 94, missing: 0}
	];

	self.problemStudents = [
		{name: 'McGee, Bubba', grade: 78, missing: 6, hw: 69, quiz: 81, test: 76},
		{name: 'Smith, Alex', grade: 59, missing: 3, stds: 'A-REI.3, F-LE.1c, N-RN.2', hw: 17, quiz: 73, test: 50},
		{name: 'Thompson, Alice', grade: 68, missing: 12, stds: 'A-REI.1', hw: 75, quiz: 73, test: 70},
	];

	self.problemStandards = [
		{name: 'A-REI.1', grade: 48},
		{name: 'A-REI.3', grade: 62},
	];

	self.problemAssigns = [
		{name: '1.1 Writing and Translating Algebraic Expressions', grade: 68},
		{name: '1.8 Scientific Notation, Significant Digits, Precision, and Accuracy', grade: 47},
	];

	self.assignments = [
		{type: 'Homework', name: '1.1 Writing and Translating Algebraic Expressions', grade: calcPercent(15/20), student: 71, due: '4/2/15', correct: 15, missed: 5, bar: getBar(7), epf: [2, 6, 5]},
		{type: 'Homework', name: '1.2 Translating and Writing Formulas', grade: calcPercent(25/30), student: 93, due: '4/4/15', pending: true, correct: 25, missed: 5, bar: getBar(1), epf: [5, 3, 5]},
		{type: 'Test', name: '1.3 Simple Algebraic Inequalities', grade: calcPercent(20/21), student: 89, due: '4/6/15', correct: 20, missed: 1, bar: getBar(6), epf:[11, 1, 1]},
		{type: 'Homework', name: '1.4 Evaluating Algebraic Expressions and Formulas', grade: calcPercent(12/19), student: 84, due: '4/8/15', pending: true, correct: 12, missed: 7, bar: getBar(5), epf: [1, 6, 6]},
		{type: 'Homework', name: '1.5 Algebraic Properties', grade: calcPercent(5/6), student: 76, due: '4/10/15', correct: 5, missed: 1, bar: getBar(1), epf: [5, 3, 5]},
		{type: 'Quiz', name: '1.6 Exponents', grade: calcPercent(17/19), student: 'X', due: '4/12/15', correct: 17, missed: 2, bar: getBar(2), epf: [8, 2, 3]},
		{type: 'Homework', name: '1.7 Roots and Radicals', grade: calcPercent(31/35), student: 47, due: '4/14/15', correct: 31, missed: 4, bar: getBar(2), epf: [8, 2, 3]},
		{type: 'Homework', name: '1.8 Scientific Notation, Significant Digits, Precision, and Accuracy', grade: calcPercent(11/12), student: 53, due: '4/16/15', correct: 11, missed: 12, bar: getBar(3), epf: [10, 1, 2]},
	];

	self.problems = [
		{text: "1) What is your name?", pending: false, grade: 80, assign: 1, epf: [17, 16, 17], excel: ["Abigail Hirano", "Lemuel Amorim", "Altha Cavins", "Sharonda Mongold", "Celestina Okeefe", "Blythe Ware", "Cierra Buie", "Mariette Garoutte", "Cliff Farless", "Christal Durrance", "Herman Zahn", "Winford Becnel", "Isaura Gossett", "Shoshana Brazier", "Ardell Ort", "Bethel Weiler", "Gilma Kidney",], 
		pass: ["Keely Harter", "Michell Dunkelberger", "Merissa Krom", "Seema McAdams", "Kimberley Heilmann","Adrienne McMath", "Dominick Harber", "Janett Solley", "Bev Dillow", "Ranee McKissick", "Yoko Ott", "Williams Shiflett", "Don Paez", "Deidra Stokely", "Jung Petrovich", "Launa Hyler",], 
		fail: ["Eilene Tripoli", "Hermila Valerius", "Roderick Childress", "Ligia Pepe", "Melia Currie", "Julie Circle", "Vonnie Ryba", "Lilli Figeroa", "Clarice Raco", "Georgette Martinez", "Lakenya Kinlaw", "Cecile Strohm", "Loni Kozel", "Sanjuana Faison", "Tyson Mayhue", "Madie Holdren", "Lynetta Marcelino",]
		},
		{text: "2) What is your quest?", pending: false, grade: 75, assign: 0, epf: [10, 20, 20], excel: ["Abigail Hirano", "Lemuel Amorim", "Altha Cavins", "Sharonda Mongold", "Celestina Okeefe", "Blythe Ware", "Cierra Buie", "Mariette Garoutte", "Cliff Farless", "Christal Durrance",], 
		pass: ["Keely Harter", "Michell Dunkelberger", "Merissa Krom", "Seema McAdams", "Kimberley Heilmann","Adrienne McMath", "Dominick Harber", "Janett Solley", "Bev Dillow", "Ranee McKissick", "Yoko Ott", "Williams Shiflett", "Don Paez", "Deidra Stokely", "Jung Petrovich", "Launa Hyler", "Herman Zahn", "Winford Becnel", "Isaura Gossett", "Shoshana Brazier",], 
		fail: ["Eilene Tripoli", "Hermila Valerius", "Roderick Childress", "Ligia Pepe", "Melia Currie", "Julie Circle", "Vonnie Ryba", "Lilli Figeroa", "Clarice Raco", "Georgette Martinez", "Lakenya Kinlaw", "Cecile Strohm", "Loni Kozel", "Sanjuana Faison", "Tyson Mayhue", "Madie Holdren", "Lynetta Marcelino", "Ardell Ort", "Bethel Weiler", "Gilma Kidney",]
		},
		{text: "3) What is your favorite color?", pending: false, grade: 79, assign: 1, epf: [17, 16, 17], excel: ["Abigail Hirano", "Lemuel Amorim", "Altha Cavins", "Sharonda Mongold", "Celestina Okeefe", "Blythe Ware", "Cierra Buie", "Mariette Garoutte", "Cliff Farless", "Christal Durrance", "Herman Zahn", "Winford Becnel", "Isaura Gossett", "Shoshana Brazier", "Ardell Ort", "Bethel Weiler", "Gilma Kidney",],
		 pass: ["Keely Harter", "Michell Dunkelberger", "Merissa Krom", "Seema McAdams", "Kimberley Heilmann","Adrienne McMath", "Dominick Harber", "Janett Solley", "Bev Dillow", "Ranee McKissick", "Yoko Ott", "Williams Shiflett", "Don Paez", "Deidra Stokely", "Jung Petrovich", "Launa Hyler",], 
		 fail: ["Eilene Tripoli", "Hermila Valerius", "Roderick Childress", "Ligia Pepe", "Melia Currie", "Julie Circle", "Vonnie Ryba", "Lilli Figeroa", "Clarice Raco", "Georgette Martinez", "Lakenya Kinlaw", "Cecile Strohm", "Loni Kozel", "Sanjuana Faison", "Tyson Mayhue", "Madie Holdren", "Lynetta Marcelino",]
		},
		{text: "4) What is the capital of Assyria?", pending: false, grade: 91, assign: 7, epf: [40, 5, 5], excel: ["Abigail Hirano", "Lemuel Amorim", "Altha Cavins", "Sharonda Mongold", "Celestina Okeefe", "Blythe Ware", "Cierra Buie", "Mariette Garoutte", "Cliff Farless", "Christal Durrance", "Herman Zahn", "Winford Becnel", "Isaura Gossett", "Shoshana Brazier", "Ardell Ort", "Bethel Weiler", "Gilma Kidney", "Adrienne McMath", "Dominick Harber", "Janett Solley", "Bev Dillow", "Ranee McKissick", "Yoko Ott", "Williams Shiflett", "Don Paez", "Deidra Stokely", "Jung Petrovich", "Launa Hyler", "Julie Circle", "Vonnie Ryba", "Lilli Figeroa", "Clarice Raco", "Georgette Martinez", "Lakenya Kinlaw", "Cecile Strohm", "Loni Kozel", "Sanjuana Faison", "Tyson Mayhue", "Madie Holdren", "Lynetta Marcelino",],
		 pass: ["Keely Harter", "Michell Dunkelberger", "Merissa Krom", "Seema McAdams", "Kimberley Heilmann",], 
		 fail: ["Eilene Tripoli", "Hermila Valerius", "Roderick Childress", "Ligia Pepe", "Melia Currie",]
		},
		{text: "5) What is the air-speed velocity of an unladen swallow?", pending: false, grade: 64, assign: 3, epf: [5, 22, 23], excel: ["Abigail Hirano", "Lemuel Amorim", "Altha Cavins", "Sharonda Mongold", "Celestina Okeefe",],
		 pass: ["Keely Harter", "Michell Dunkelberger", "Merissa Krom", "Seema McAdams", "Kimberley Heilmann","Adrienne McMath", "Dominick Harber", "Janett Solley", "Bev Dillow", "Ranee McKissick", "Yoko Ott", "Williams Shiflett", "Don Paez", "Deidra Stokely", "Jung Petrovich", "Launa Hyler", "Blythe Ware", "Cierra Buie", "Mariette Garoutte", "Cliff Farless", "Christal Durrance", "Herman Zahn",], 
		 fail: ["Eilene Tripoli", "Hermila Valerius", "Roderick Childress", "Ligia Pepe", "Melia Currie", "Julie Circle", "Vonnie Ryba", "Lilli Figeroa", "Clarice Raco", "Georgette Martinez", "Lakenya Kinlaw", "Cecile Strohm", "Loni Kozel", "Sanjuana Faison", "Tyson Mayhue", "Madie Holdren", "Lynetta Marcelino", "Winford Becnel", "Isaura Gossett", "Shoshana Brazier", "Ardell Ort", "Bethel Weiler", "Gilma Kidney",]
		},
	];

	self.assignList = _.map(self.assignments, function(entry) {return truncName(entry.name)});
	self.assignNoCatgegory = _.cloneDeep(self.assignList);
	self.assignList.unshift('All Homework', 'All Quizzes', 'All Tests', 'All i-Practice');
	self.curAssign = self.assignNoCatgegory[0];

	self.standards = [{"code":"A-APR","name":"Arithmetic with Polynomials & Rational Expressions","children":[{"id":"2518","code":"A-APR 1","name":"Apply operations to polynomials and understand closure."},{"id":"2576","code":"A-APR 3","name":"Find zeroes of factored polynomials."},{"id":"2581","code":"A-APR 6","name":"Rewrite rational expressions using inspection, long division, or a computer algebra system."}]},{"code":"A-CED","name":"Creating Equations","children":[{"id":"2519","code":"A-CED 1","name":"Solve problems in one variable by creating equations\/inequalities."},{"id":"2520","code":"A-CED 2","name":"Represent relationships by creating and graphing equations in two variables."},{"id":"2521","code":"A-CED 3","name":"Represent and interpret solutions of systems of equations\/inequalities."},{"id":"2522","code":"A-CED 4","name":"Rearrange formulas using the same reasoning as solving equations."}]},{"code":"A-REI","name":"Reasoning with Equations & Inequalities","children":[{"id":"2523","code":"A-REI 1","name":"Use equality of numbers to explain each step of solving an equation."},{"id":"2524","code":"A-REI 10","name":"Understand that the graph of a two-variable equation is the set of all its solutions."},{"id":"2525","code":"A-REI 11","name":"Explain why the <i>x<\/i>-coordinates of the points of intersection of <i>y<\/i> = <i>f<\/i>(<i>x<\/i>) and <i>y<\/i>  = <i>g<\/i>(<i>x<\/i>) are the solutions of the equation <i>f<\/i>(<i>x<\/i>) = <i>g<\/i>(<i>x<\/i>)."},{"id":"2526","code":"A-REI 12","name":"Graph the solutions to a linear inequality in two variables."},{"id":"2527","code":"A-REI 3","name":"Solve linear equations\/inequalities in one variable."},{"id":"2528","code":"A-REI 4a","name":"Complete the square to rewrite quadratic functions in vertex form and to derive the quadratic formula."},{"id":"2529","code":"A-REI 4b","name":"Solve quadratic equations in one variable."},{"id":"2530","code":"A-REI 5","name":"Prove that applying elimination to a system of equations in two variables produces a system with the same solutions."},{"id":"2531","code":"A-REI 6","name":"Solve systems of linear equations exactly and\/or approximately."},{"id":"2532","code":"A-REI 7","name":"Algebraically and graphically solve systems of one linear and one quadratic equation."}]},{"code":"A-SSE","name":"Seeing Structure in Expressions","children":[{"id":"2533","code":"A-SSE 1a","name":"Interpret terms, factors, and coefficients of an expression."},{"id":"2534","code":"A-SSE 1b","name":"Interpret complicated expressions by viewing parts as one object."},{"id":"2535","code":"A-SSE 2","name":"Identify ways to rewrite expressions."},{"id":"2536","code":"A-SSE 3a","name":"Find the zeros of a quadratic function by factoring."},{"id":"2537","code":"A-SSE 3b","name":"Find maximum\/minimum values of a quadratic function by completing the square."},{"id":"2538","code":"A-SSE 3c","name":"Transform exponential expressions."}]},{"code":"F-BF","name":"Building Functions","children":[{"id":"2539","code":"F-BF 1a","name":"Determine an explicit expression or a recursive process that describes a relationship between two quantities."},{"id":"2540","code":"F-BF 1b","name":"Write a function that describes a relationship by using arithmetic operations."},{"id":"2541","code":"F-BF 2","name":"Model arithmetic and geometric sequence situations recursively and\/or with an explicit formula."},{"id":"2542","code":"F-BF 3","name":"Identify and explain transformations in both equation and graphical form."},{"id":"2543","code":"F-BF 4a","name":"Write an expression for the inverse of a linear function."},{"id":"2580","code":"F-BF 4c","name":"Read values of an inverse function from a graph or a table."}]},{"code":"F-IF","name":"Interpreting Functions","children":[{"id":"2544","code":"F-IF 1","name":"Understand that in a function, each element of the domain, <i>x<\/i>, maps to exactly one element of the range, <i>f<\/i>(<i>x<\/i>)."},{"id":"2545","code":"F-IF 2","name":"Evaluate functions and interpret statements that use function notation."},{"id":"2546","code":"F-IF 3","name":"Recognize that sequences are functions, sometimes defined recursively, whose domain is a subset of the integers."},{"id":"2547","code":"F-IF 4","name":"For a function that models a relationship between two quantities, interpret tables and graphs and\/or sketch key features of graphs."},{"id":"2548","code":"F-IF 5","name":"Identify the appropriate domain of a function."},{"id":"2549","code":"F-IF 6","name":"Calculate, estimate, and\/or interpret the average rate of change of a function."},{"id":"2550","code":"F-IF 7a","name":"Graph and show the key features of linear and quadratic functions."},{"id":"2551","code":"F-IF 7b","name":"Graph and show the key features of square root, cube root, and piecewise-defined functions."},{"id":"2582","code":"F-IF 7c","name":"Graph polynomial functions expressed symbolically, identify zeros when factorizations are available, and show end behavior."},{"id":"2552","code":"F-IF 7e","name":"Factor and\/or complete the square in a quadratic function to reveal various properties."},{"id":"2553","code":"F-IF 8a","name":"Factor and\/or complete the square in a quadratic function to reveal various properties."},{"id":"2554","code":"F-IF 8b","name":"Use the properties of exponents to interpret exponential functions."},{"id":"2555","code":"F-IF 9","name":"Compare properties of two functions, each represented in a different way."}]},{"code":"F-LE","name":"Linear, Quadratic, & Exponential Models","children":[{"id":"2556","code":"F-LE 1a","name":"Prove that linear functions grow by equal differences over equal intervals, and that exponential functions grow by equal factors over equal intervals."},{"id":"2557","code":"F-LE 1b","name":"Recognize situations in which one quantity changes at a constant rate per unit change of another quantity."},{"id":"2558","code":"F-LE 1c","name":"Recognize situations in which a quantity grows or decays by a constant percent rate per unit change of another quantity."},{"id":"2559","code":"F-LE 2","name":"Construct linear and exponential functions given a graph, a description of a relationship, or two input\/output pairs."},{"id":"2560","code":"F-LE 3","name":"Observe that a quantity increasing exponentially eventually exceeds a quantity increasing linearly or quadratically."},{"id":"2561","code":"F-LE 5","name":"Interpret the parameters in a linear or exponential function in terms of a context."}]},{"code":"N-Q","name":"Quantities","children":[{"id":"2562","code":"N-Q 1","name":"Use units to understand multi-step problems, formulas, graphs, and data displays."},{"id":"2563","code":"N-Q 2","name":"Define quantities for descriptive modeling."},{"id":"2564","code":"N-Q 3","name":"Choose a level of accuracy appropriate to limitations on measurement."}]},{"code":"N-RN","name":"The Real Number System","children":[{"id":"2577","code":"N-RN 1","name":"Extend the properties of exponents to rational exponents."},{"id":"2578","code":"N-RN 2","name":"Rewrite expressions containing radicals and\/or rational exponents."},{"id":"2565","code":"N-RN 3","name":"Use properties of rational and irrational numbers and explain outcomes."}]},{"code":"S-ID","name":"Interpreting Categorical & Quantitative Data","children":[{"id":"2566","code":"S-ID 1","name":"Represent data with dot plots, histograms, and box plots."},{"id":"2567","code":"S-ID 2","name":"Compare median, mean, interquartile range, and standard deviation of data sets."},{"id":"2568","code":"S-ID 3","name":"Interpret differences in shape, center, and spread in the context of the data sets."},{"id":"2569","code":"S-ID 5","name":"Summarize and interpret data on two categorical and quantitative variables."},{"id":"2570","code":"S-ID 6a","name":"Create and\/or use linear, quadratic, and exponential models fitted to data to solve problems."},{"id":"2571","code":"S-ID 6b","name":"Informally assess the fit of a function by plotting and analyzing residuals."},{"id":"2572","code":"S-ID 6c","name":"Fit a linear function to a scatter plot when appropriate."},{"id":"2573","code":"S-ID 7","name":"Interpret the slope and the intercept of a linear model in the context of the data."},{"id":"2574","code":"S-ID 8","name":"Using technology, compute and interpret the correlation coefficient of a linear fit."},{"id":"2575","code":"S-ID 9","name":"Distinguish between correlation and causation."}]}];

	self.stdList = _.map(self.standards, function(entry) { return truncName(entry.code + ': ' + entry.name) });

	self.allStds = [{"code":"A-APR","name":"Arithmetic with Polynomials & Rational Expressions","children":[{"id":"4354","code":"A-APR 1","name":"Apply operations to polynomials and understand closure."},{"id":"4355","code":"A-APR 3","name":"Find zeroes of factored polynomials."}]},{"code":"A-CED","name":"Creating Equations","children":[{"id":"4356","code":"A-CED 1","name":"Solve problems in one variable by creating equations\/inequalities."},{"id":"4357","code":"A-CED 2","name":"Represent relationships by creating and graphing equations in two variables."},{"id":"4358","code":"A-CED 3","name":"Represent and interpret solutions of systems of equations\/inequalities."},{"id":"4359","code":"A-CED 4","name":"Rearrange formulas using the same reasoning as solving equations."}]},{"code":"A-REI","name":"Reasoning with Equations & Inequalities","children":[{"id":"4360","code":"A-REI 1","name":"Use equality of numbers to explain each step of solving an equation."},{"id":"4367","code":"A-REI 10","name":"Understand that the graph of a two-variable equation is the set of all its solutions."},{"id":"4368","code":"A-REI 11","name":"Explain why the <i>x<\/i>-coordinates of the points of intersection of <i>y<\/i> = <i>f<\/i>(<i>x<\/i>) and <i>y<\/i>  = <i>g<\/i>(<i>x<\/i>) are the solutions of the equation <i>f<\/i>(<i>x<\/i>) = <i>g<\/i>(<i>x<\/i>)."},{"id":"4369","code":"A-REI 12","name":"Graph the solutions to a linear inequality in two variables."},{"id":"4361","code":"A-REI 3","name":"Solve linear equations\/inequalities in one variable."},{"id":"4362","code":"A-REI 4a","name":"Complete the square to rewrite quadratic functions in vertex form and to derive the quadratic formula."},{"id":"4363","code":"A-REI 4b","name":"Solve quadratic equations in one variable."},{"id":"4364","code":"A-REI 5","name":"Prove that applying elimination to a system of equations in two variables produces a system with the same solutions."},{"id":"4365","code":"A-REI 6","name":"Solve systems of linear equations exactly and\/or approximately."},{"id":"4366","code":"A-REI 7","name":"Algebraically and graphically solve systems of one linear and one quadratic equation."}]},{"code":"A-SSE","name":"Seeing Structure in Expressions","children":[{"id":"4348","code":"A-SSE 1a","name":"Interpret terms, factors, and coefficients of an expression."},{"id":"4349","code":"A-SSE 1b","name":"Interpret complicated expressions by viewing parts as one object."},{"id":"4350","code":"A-SSE 2","name":"Identify ways to rewrite expressions."},{"id":"4351","code":"A-SSE 3a","name":"Find the zeros of a quadratic function by factoring."},{"id":"4352","code":"A-SSE 3b","name":"Find maximum\/minimum values of a quadratic function by completing the square."},{"id":"4353","code":"A-SSE 3c","name":"Transform exponential expressions."}]},{"code":"F-BF","name":"Building Functions","children":[{"id":"4382","code":"F-BF 1a","name":"Determine an explicit expression or a recursive process that describes a relationship between two quantities."},{"id":"4383","code":"F-BF 1b","name":"Write a function that describes a relationship by using arithmetic operations."},{"id":"4384","code":"F-BF 2","name":"Model arithmetic and geometric sequence situations recursively and\/or with an explicit formula."},{"id":"4385","code":"F-BF 3","name":"Identify and explain transformations in both equation and graphical form."},{"id":"4386","code":"F-BF 4a","name":"Write an expression for the inverse of a linear function."}]},{"code":"F-IF","name":"Interpreting Functions","children":[{"id":"4370","code":"F-IF 1","name":"Understand that in a function, each element of the domain, <i>x<\/i>, maps to exactly one element of the range, <i>f<\/i>(<i>x<\/i>)."},{"id":"4371","code":"F-IF 2","name":"Evaluate functions and interpret statements that use function notation."},{"id":"4372","code":"F-IF 3","name":"Recognize that sequences are functions, sometimes defined recursively, whose domain is a subset of the integers."},{"id":"4373","code":"F-IF 4","name":"For a function that models a relationship between two quantities, interpret tables and graphs and\/or sketch key features of graphs."},{"id":"4374","code":"F-IF 5","name":"Identify the appropriate domain of a function."},{"id":"4375","code":"F-IF 6","name":"Calculate, estimate, and\/or interpret the average rate of change of a function."},{"id":"4376","code":"F-IF 7a","name":"Graph and show the key features of linear and quadratic functions."},{"id":"4377","code":"F-IF 7b","name":"Graph and show the key features of square root, cube root, and piecewise-defined functions."},{"id":"4378","code":"F-IF 7e","name":"Factor and\/or complete the square in a quadratic function to reveal various properties."},{"id":"4379","code":"F-IF 8a","name":"Factor and\/or complete the square in a quadratic function to reveal various properties."},{"id":"4380","code":"F-IF 8b","name":"Use the properties of exponents to interpret exponential functions."},{"id":"4381","code":"F-IF 9","name":"Compare properties of two functions, each represented in a different way."}]},{"code":"F-LE","name":"Linear, Quadratic, & Exponential Models","children":[{"id":"4387","code":"F-LE 1a","name":"Prove that linear functions grow by equal differences over equal intervals, and that exponential functions grow by equal factors over equal intervals."},{"id":"4388","code":"F-LE 1b","name":"Recognize situations in which one quantity changes at a constant rate per unit change of another quantity."},{"id":"4389","code":"F-LE 1c","name":"Recognize situations in which a quantity grows or decays by a constant percent rate per unit change of another quantity."},{"id":"4390","code":"F-LE 2","name":"Construct linear and exponential functions given a graph, a description of a relationship, or two input\/output pairs."},{"id":"4391","code":"F-LE 3","name":"Observe that a quantity increasing exponentially eventually exceeds a quantity increasing linearly or quadratically."},{"id":"4392","code":"F-LE 5","name":"Interpret the parameters in a linear or exponential function in terms of a context."}]},{"code":"N-Q","name":"Quantities","children":[{"id":"4345","code":"N-Q 1","name":"Use units to understand multi-step problems, formulas, graphs, and data displays."},{"id":"4346","code":"N-Q 2","name":"Define quantities for descriptive modeling."},{"id":"4347","code":"N-Q 3","name":"Choose a level of accuracy appropriate to limitations on measurement."}]},{"code":"N-RN","name":"The Real Number System","children":[{"id":"4342","code":"N-RN 1","name":"Extend the properties of exponents to rational exponents."},{"id":"4343","code":"N-RN 2","name":"Rewrite expressions containing radicals and\/or rational exponents."},{"id":"4344","code":"N-RN 3","name":"Use properties of rational and irrational numbers and explain outcomes."}]},{"code":"S-ID","name":"Interpreting Categorical & Quantitative Data","children":[{"id":"4393","code":"S-ID 1","name":"Represent data with dot plots, histograms, and box plots."},{"id":"4394","code":"S-ID 2","name":"Compare median, mean, interquartile range, and standard deviation of data sets."},{"id":"4395","code":"S-ID 3","name":"Interpret differences in shape, center, and spread in the context of the data sets."},{"id":"4396","code":"S-ID 5","name":"Summarize and interpret data on two categorical and quantitative variables."},{"id":"4397","code":"S-ID 6a","name":"Create and\/or use linear, quadratic, and exponential models fitted to data to solve problems."},{"id":"4398","code":"S-ID 6b","name":"Informally assess the fit of a function by plotting and analyzing residuals."},{"id":"4399","code":"S-ID 6c","name":"Fit a linear function to a scatter plot when appropriate."},{"id":"4400","code":"S-ID 7","name":"Interpret the slope and the intercept of a linear model in the context of the data."},{"id":"4401","code":"S-ID 8","name":"Using technology, compute and interpret the correlation coefficient of a linear fit."},{"id":"4402","code":"S-ID 9","name":"Distinguish between correlation and causation."}]}];
	self.bigStdList = _.flatten(_.map(self.allStds, function(entry){ return [entry.code].concat(_.pluck(entry.children, 'code'))}));

	self.curStd = "A-APR.2";
	self.curStudent = "All Students";

	self.standardDetail = [
		{name: 'A-CED.1', grade: 68, student: 71, due: '4/2/15', correct: 15, missed: 5, bar: getBar(5), epf: [1, 6, 6]},
		{name: 'A-CED.2', grade: 84, student: 93, due: '4/4/15', pending: true, correct: 25, missed: 5, bar: getBar(1), epf: [5, 3, 5]},
		{name: 'A-CED.3', grade: 75, student: 89, due: '4/6/15', correct: 3, missed: 1, bar: getBar(7), epf: [2, 6, 5]},
		{name: 'A-CED.4', grade: 79, student: 84, due: '4/8/15', pending: true, correct: 12, missed: 7, bar: getBar(1), epf: [5, 3, 5]},
	];

	self.categories = ['Homework', 'Quiz', 'Test', 'i-Practice'];

	self.reportTitle = "Select a report";

	self.problemList = [{"id":"72968","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"20"}],"q":"Write an expression for the total cost of [a] shirts when each costs <i>x<\/i> dollars.","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtext>[a]<\/mtext><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_products"},{"id":"72974","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"5","max":"10"}],"constraints":["a!=6"],"q":"<p>Use the table to choose the correct expression for the cost of shipping gift baskets based on the number of baskets you buy.<\/p>\n\n<p><math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtable columnalign=\"left\"><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mi>N<\/mi><mi>u<\/mi><mi>m<\/mi><mi>b<\/mi><mi>e<\/mi><mi>r<\/mi><mtext>&#160;<\/mtext><mi>o<\/mi><mi>f<\/mi><mtext>&#160;<\/mtext><mi>b<\/mi><mi>a<\/mi><mi>s<\/mi><mi>k<\/mi><mi>e<\/mi><mi>t<\/mi><mi>s<\/mi><mrow><mo>(<\/mo><mi>N<\/mi><mo>)<\/mo><\/mrow><mtext>&#160;&#160;<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mi>S<\/mi><mi>h<\/mi><mi>i<\/mi><mi>p<\/mi><mi>p<\/mi><mi>i<\/mi><mi>n<\/mi><mi>g<\/mi><mtext>&#160;<\/mtext><mi>c<\/mi><mi>o<\/mi><mi>s<\/mi><mi>t<\/mi><mtext>&#160;<\/mtext><mi>i<\/mi><mi>n<\/mi><mtext>&#160;<\/mtext><mi>d<\/mi><mi>o<\/mi><mi>l<\/mi><mi>l<\/mi><mi>a<\/mi><mi>r<\/mi><mi>s<\/mi><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mn>1<\/mn><\/mtd><mtd columnalign=\"left\"><mrow><mtext>[a]<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mn>2<\/mn><\/mtd><mtd columnalign=\"left\"><mrow><mtext>[a+2]<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mn>3<\/mn><\/mtd><mtd columnalign=\"left\"><mrow><mtext>[a+4]<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mn>4<\/mn><\/mtd><mtd columnalign=\"left\"><mrow><mtext>[a+6]<\/mtext><\/mrow><\/mtd><\/mtr><\/mtable><\/mrow><\/math><\/p>\n","choices":[{"id":"92310","a":"2<i>N <\/i>+ [a-2]"},{"id":"92311","a":"2<i>N <\/i>+ 4"},{"id":"92312","a":"<i>N <\/i>+ 4"},{"id":"92313","a":"2<i>N<\/i>"}],"a":"92310","ansType":"radio","points":5,"video":"write_algebraic_expressions_using_the_input_and_output_values_from"},{"id":"73746","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"50"}],"prefix":"Write an algebraic expression for:","q":"<i>M<\/i> less than <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math>","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><mo>-<\/mo><mi>M<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"73747","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"b","step":"1","min":"2","max":"20"},{"label":"a","step":"1","min":"2","max":"20"}],"prefix":"Write an algebraic expression for:","q":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> more than <i>z<\/i> times <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[b]<\/mtext><\/mrow><\/mrow><\/math>","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[b]<\/mtext><\/mrow><mi>z<\/mi><mo>+<\/mo><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math>","ansType":"input","points":3},{"id":"73748","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"5","max":"30"}],"q":"<p>There are <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> cell phones to choose from, and <i>b <\/i>of those cell phones are black.<\/p>\n\n<p>Write an expression for the number of cell phones that are not black.<\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><mo>-<\/mo><mi>b<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"73749","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"20"}],"q":"<p>There are <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> more women than there are men at a PTA meeting.<\/p>\n\n<p>Using <i>m<\/i> to represent the number of men, write an expression for the number of women.<\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><mo>+<\/mo><mi>m<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"73750","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"12"}],"q":"<p>On the shelves of a novelty store, there are <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> times as many rubber chickens as there are whoopee cushions.<\/p>\n\n<p>Using <i>w<\/i> to represent the number of whoopee cushions, write an expression to show how many rubber chickens there are.<\/p>","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><mi>w<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_products"},{"id":"73751","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"10","max":"100"}],"q":"<p>In a grocery store, <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> more paper bags were used than plastic bags.<\/p>\n\n<p>Let <i>p<\/i> represent the number of paper bags used, and write an expression for the number of plastic bags used.<\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mi>p<\/mi><mo>-<\/mo><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"73752","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"10","max":"50"}],"q":"<p>There are <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> people in a restaurant.<\/p>\n\n<p>Each person orders either coffee or tea.<\/p>\n\n<p>If <i>p<\/i> people order coffee, write an expression for the number of people who order tea.<\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><mo>-<\/mo><mi>p<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"73760","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"b","step":"1","min":"2","max":"10"},{"label":"a","step":"1","min":"2","max":"10"}],"q":"<p>In the game of horseshoes, contestants toss U-shaped horseshoes toward a stake. One method of scoring grants 3 points for a <i>ringer<\/i> (a horseshoe that encircles the stake) and 1 point for a <i>leaner<\/i> (a horseshoe that touches the stake but is not a ringer). Melissa scores <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[a]<\/mtext><\/mrow><\/mrow><\/math> ringers and <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mrow><mtext>[b]<\/mtext><\/mrow><\/mrow><\/math> leaners.<\/p>\n\n<p>How many points did she score?<\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><maction selection=\"1\" actiontype=\"input\"><mtext>[3*a+b]<\/mtext><\/maction><\/math>","ansType":"MultKinetic","points":5,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"74085","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"20"}],"q":"Write an expression for the total number of calories in [a] fries when there are <i>x<\/i> calories per fry.","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtext>[a]<\/mtext><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_products"},{"id":"74086","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"20"}],"q":"Write an expression for the total cost of [a] shirts when each costs <i>x<\/i> dollars.","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtext>[a]<\/mtext><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_products"},{"id":"74087","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"vars":[{"label":"a","step":"1","min":"2","max":"20"}],"q":"[a] apples are picked from a tree and placed evenly into <i>x<\/i> boxes. Write an expression for the number of apples in each box.","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mfrac linethickness=\"thin\"><mrow><mtext>[a]<\/mtext><\/mrow><mi>x<\/mi><\/mfrac><\/mrow><\/math>","ansType":"input","points":3,"video":"write_algebraic_expressions_about_products"},{"id":"74845","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write an expression that means &#8220;six more than a number.&#8221;","q":"Call the number &#8220;<span class=\"math\"><i>x<\/i><\/span>&#8221;.","a":"<math><mrow><mi>x<\/mi><mo>+<\/mo><mn>6<\/mn><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"74846","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write an expression that means &#8220;four times a number.&#8221;","q":"Call the number &#8220;<span class=\"math\"><i>x<\/i><\/span>&#8221;.","a":"<math><mrow><mn>4<\/mn><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_products"},{"id":"74847","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"Write an expression that means &#8220;<span class=\"math\"><i>x<\/i><\/span> less than five.&#8221;","a":"<math><mrow><mn>5<\/mn><mo>-<\/mo><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"74849","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write an expression that means &#8220;the sum of a number and 14.&#8221;","q":"Call the number &#8220;<span class=\"math\"><i>x<\/i><\/span>&#8221;","a":"<math><mrow><mi>x<\/mi><mo>+<\/mo><mn>14<\/mn><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"74852","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"<p>Write an expression for &#8220;The sum of 7 times a number and 15.&#8221;<\/p>\n\n<p>Use <i>x<\/i> to represent the number.<\/p>\n","hasSteps":true,"a":"<math><mrow><mn>7<\/mn><mi>x<\/mi><mo>+<\/mo><mn>15<\/mn><\/mrow><\/math>","ansType":"input","points":5},{"id":"74855","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write an expression that means &#8220;the sum of three and twice a number.&#8221;","q":"Call the number &#8220;<span class=\"math\"><i>x<\/i><\/span>&#8221;.","a":"<math><mrow><mn>3<\/mn><mo>+<\/mo><mn>2<\/mn><mi>x<\/mi><\/mrow><\/math>","ansType":"input","points":5},{"id":"74856","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"Write an expression that means &#8220;100 minus the quotient of 56 divided by <i>x<\/i>.&#8221;","a":"<math><mrow><mn>100<\/mn><mo>-<\/mo><mfrac><mrow><mn>56<\/mn><\/mrow><mi>x<\/mi><\/mfrac><\/mrow><\/math>","ansType":"input","points":5},{"id":"74884","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"<p><span class=\"question\"><span><span>Which of the expressions gives the cost of renting a chainsaw for <\/span><span class=\"math\"><i>h<\/i><\/span><span> hours, based on the table below? <\/span><\/span><\/span><\/p>\n\n<p><span class=\"question\"><span><math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtable columnalign=\"left\"><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mstyle mathsize=\"normal\" mathvariant=\"bold\"><mi>H<\/mi><mi>o<\/mi><mi>u<\/mi><mi>r<\/mi><mi>s<\/mi><\/mstyle><mtext>&#160;<\/mtext><mrow><mo>(<\/mo><mi>h<\/mi><mo>)<\/mo><\/mrow><mtext>&#160;&#160;&#160;&#160;<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mstyle mathsize=\"normal\" mathvariant=\"bold\"><mi>C<\/mi><mi>o<\/mi><mi>s<\/mi><mi>t<\/mi><\/mstyle><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>1<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>12<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>2<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>14<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>3<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>16<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>4<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>18<\/mtext><\/mrow><\/mtd><\/mtr><\/mtable><\/mrow><\/math><\/span><\/span><\/p>\n","choices":[{"id":"67853","a":"<span class=\"math\">12&#183;<i>h<\/i><\/span>"},{"id":"67854","a":"<span class=\"math\">10 + 2&#183;<i>h<\/i><\/span>"},{"id":"67855","a":"<span class=\"math\">12&#183;<i>h<\/i> + 2<\/span>"},{"id":"67856","a":"<span class=\"math\">12 + 2&#183;<i>h<\/i><\/span>"}],"a":"67854","ansType":"radio","points":5,"video":"write_algebraic_expressions_using_the_input_and_output_values_from"},{"id":"74886","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"<p>Using the table, write an expression for the number of bags of candy left in a shop on the day before Halloween, a number of hours (<span class=\"math\"><i>h<\/i><\/span>) after opening.<\/p>\n\n<p><math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtable columnalign=\"left\"><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>H<\/mi><mi>o<\/mi><mi>u<\/mi><mi>r<\/mi><mi>s<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>a<\/mi><mi>f<\/mi><mi>t<\/mi><mi>e<\/mi><mi>r<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>o<\/mi><mi>p<\/mi><mi>e<\/mi><mi>n<\/mi><mi>i<\/mi><mi>n<\/mi><mi>g<\/mi><\/mstyle><mtext>&#160;<\/mtext><mrow><mo>(<\/mo><mi>h<\/mi><mo>)<\/mo><\/mrow><mtext>&#160;&#160;<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>B<\/mi><mi>a<\/mi><mi>g<\/mi><mi>s<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>o<\/mi><mi>f<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>c<\/mi><mi>a<\/mi><mi>n<\/mi><mi>d<\/mi><mi>y<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>l<\/mi><mi>e<\/mi><mi>f<\/mi><mi>t<\/mi><\/mstyle><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>0<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>350<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>1<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>305<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>2<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>260<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>3<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>215<\/mtext><\/mrow><\/mtd><\/mtr><\/mtable><\/mrow><\/math><\/p>\n","choices":[{"id":"69730","a":"<span class=\"math\">350 + 45&#183;<i>h<\/i><\/span>"},{"id":"69731","a":"<span class=\"math\">350 - 45&#183;<i>h<\/i><\/span>"},{"id":"69732","a":"<span class=\"math\">45&#183;(<i>h<\/i> + 350)<\/span>"},{"id":"69733","a":"<span class=\"math\">45&#183;<i>h<\/i> - 350<\/span>"}],"a":"69731","ansType":"radio","points":5,"video":"write_algebraic_expressions_using_the_input_and_output_values_from"},{"id":"74887","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"<p>Using the table, write an expression for the cost of a picture frame given the perimeter of the picture in inches (the minimum size is 24 inches).<\/p>\n\n<p><math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtable columnalign=\"left\"><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>P<\/mi><mi>e<\/mi><mi>r<\/mi><mi>i<\/mi><mi>m<\/mi><mi>e<\/mi><mi>t<\/mi><mi>e<\/mi><mi>r<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>i<\/mi><mi>n<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>i<\/mi><mi>n<\/mi><mi>c<\/mi><mi>h<\/mi><mi>e<\/mi><mi>s<\/mi><\/mstyle><mtext>&#160;<\/mtext><mrow><mo>(<\/mo><mi>p<\/mi><mo>)<\/mo><\/mrow><mtext>&#160;&#160;<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>C<\/mi><mi>o<\/mi><mi>s<\/mi><mi>t<\/mi><\/mstyle><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mtext>24<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mtext>10<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mtext>26<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mtext>11<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mtext>28<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mtext>12<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mtext>30<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mtext>13<\/mtext><\/mrow><\/mtd><\/mtr><\/mtable><\/mrow><\/math><\/p>\n","choices":[{"id":"68204","a":"<span class=\"math\">24 + 10&#183;<i>p<\/i><\/span>"},{"id":"68205","a":"<span class=\"math\">24 + 10\/<i>p<\/i><\/span>"},{"id":"68206","a":"<span class=\"math\">10 + 2&#183;(<i>p<\/i> - 24)<\/span>"},{"id":"68207","a":"<span class=\"math\">10 + (1\/2)(<i>p<\/i> - 24)<\/span>"}],"a":"68207","ansType":"radio","points":5,"video":"write_algebraic_expressions_using_the_input_and_output_values_from"},{"id":"74888","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"The table shows the cost <i>C<\/i> of renting a karaoke machine with <i>M<\/i> extra microphones.","q":"<p>Write an expression for the cost of a karaoke machine with <i>M<\/i> extra microphones.<\/p>\n\n<p>Assume the pattern in the table continues.<\/p>\n\n<p><math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mtable columnalign=\"left\"><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>N<\/mi><mi>u<\/mi><mi>m<\/mi><mi>b<\/mi><mi>e<\/mi><mi>r<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>o<\/mi><mi>f<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>e<\/mi><mi>x<\/mi><mi>t<\/mi><mi>r<\/mi><mi>a<\/mi><\/mstyle><mtext>&#160;<\/mtext><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>M<\/mi><mi>i<\/mi><mi>c<\/mi><mi>r<\/mi><mi>o<\/mi><mi>p<\/mi><mi>h<\/mi><mi>o<\/mi><mi>n<\/mi><mi>e<\/mi><mi>s<\/mi><\/mstyle><mtext>&#160;<\/mtext><mo stretchy=\"false\">(<\/mo><mi>M<\/mi><mo stretchy=\"false\">)<\/mo><mtext>&#160;&#160;<\/mtext><\/mrow><\/mtd><mtd columnalign=\"left\"><mrow><mstyle mathvariant=\"bold\" mathsize=\"normal\"><mi>C<\/mi><mi>o<\/mi><mi>s<\/mi><mi>t<\/mi><\/mstyle><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>0<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>100<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>1<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>110<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>2<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>120<\/mtext><\/mrow><\/mtd><\/mtr><mtr columnalign=\"left\"><mtd columnalign=\"left\"><mtext>3<\/mtext><\/mtd><mtd columnalign=\"left\"><mrow><mtext>130<\/mtext><\/mrow><\/mtd><\/mtr><\/mtable><\/mrow><\/math><\/p>\n","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mn>100<\/mn><mo>+<\/mo><mn>10<\/mn><mi>M<\/mi><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_using_the_input_and_output_values_from"},{"id":"75428","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"<p>Write an expression for three times the sum of 5 and a number.&#160; Write your answer without parentheses.<\/p>\n\n<p>Call the number <i>n<\/i>.<\/p>","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mn>3<\/mn><mi>n<\/mi><mo>+<\/mo><mn>15<\/mn><\/math>","ansType":"input","points":5},{"id":"76334","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Jaime&#8217;s age is 6 years more than three times Marie&#8217;s age.","q":"<p>Write an expression for Jaime&#8217;s age.<\/p>\n\n<p>Call Marie&#8217;s age <i>n<\/i>.<\/p>","a":"<math><mrow><mn>3<\/mn><mi>n<\/mi><mo>+<\/mo><mn>6<\/mn><\/mrow><\/math>","ansType":"input","points":5},{"id":"76376","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write an expression for seven less than three times a number.","q":"Call the number <i>n<\/i>.","a":"<math><mrow><mn>3<\/mn><mi>n<\/mi><mo>-<\/mo><mn>7<\/mn><\/mrow><\/math>","ansType":"input","points":5},{"id":"76562","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"prefix":"Write the following statement as an algebraic expression:","q":"<p>Twelve less than twice a number.<\/p>\n\n<p>Use <span class=\"math\"><i>x<\/i><\/span> to represent the unknown number.<\/p>","a":"<math><mrow><mn>2<\/mn><mi>x<\/mi><mo>-<\/mo><mn>12<\/mn><\/mrow><\/math>","ansType":"input","points":5},{"id":"83632","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"A gymnastics academy displays its prices on the sign shown. Write an expression for the total cost of taking <i>c<\/i>classes. ","qImg":"http:\/\/denali.kineticbooks.com:8081\/media\/mathxa2\/pa_c1_eou1_table.gif","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mn>20<\/mn><mo>+<\/mo><mn>5<\/mn><mi>c<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_products"},{"id":"83633","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"As shown in the illustration, Denise is mixing socks, shirts and pants. If she has <i>x<\/i> pairs of socks, <i>y<\/i>tops and <i>z<\/i>bottoms, write an expression for how many outfits she can create. (And congratulations, you discovered the fundamental counting principle for yourself!)","qImg":"http:\/\/denali.kineticbooks.com:8081\/media\/mathxa2\/pa_c1_eou1_socks.gif","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mi>x<\/mi><mo>&#183;<\/mo><mi>y<\/mi><mo>&#183;<\/mo><mi>z<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_products"},{"id":"83634","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"The volume of a sphere is <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mfrac linethickness=\"thin\"><mn>4<\/mn><mn>3<\/mn><\/mfrac><mi>&#960;<\/mi><msup><mi>r<\/mi><mn>3<\/mn><\/msup><\/mrow><\/math>. What is the total volume of the balls if their radius is 3? Use <math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mi>&#960;<\/mi><\/math> as part of your answer.","qImg":"http:\/\/denali.kineticbooks.com:8081\/media\/mathxa2\/pa_c1_eou1_balls.gif","a":"<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\"><mrow><mn>108<\/mn><mi>&#960;<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_products"},{"id":"94081","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"You stop at a gas station for car repairs.  You pay $25 for windshield wipers, and buy <i>g<\/i> gallons of gas at $4 a gallon. Write an expression for the total amount of money you spend. ","hasSteps":true,"a":"<math><mrow><mn>25<\/mn><mo>+<\/mo><mn>4<\/mn><mi>g<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_sums_and_differences"},{"id":"94085","standards":[{"id":"2454","name":"1.1","classid":"5"},{"id":"5109","name":"R.1","classid":"9"}],"q":"Sam bought <span class=\"math\"><i>d<\/i><\/span> donuts. Each donut cost $2.50. He paid using a $10 bill. Write an expression for the amount of change he will receive. Use&#160;<i>d&#160;<\/i>for the amount of donuts. Your expression should produce an output in dollars.","a":"<math><mrow><mn>10<\/mn><mo>-<\/mo><mn>2.5<\/mn><mi>d<\/mi><\/mrow><\/math>","ansType":"input","points":5,"video":"write_algebraic_expressions_about_products"}];
	
	self.names = {
		excel: [
			"Abigail Hirano",
			"Lemuel Amorim",
			"Altha Cavins",
			"Sharonda Mongold",
			"Celestina Okeefe",
			"Blythe Ware",
			"Cierra Buie",
			"Mariette Garoutte",
			"Cliff Farless",
			"Christal Durrance",
			"Herman Zahn",
			"Winford Becnel",
			"Isaura Gossett",
			"Shoshana Brazier",
			"Ardell Ort",
			"Bethel Weiler",
			"Gilma Kidney",
		],
		pass: [
			"Keely Harter",
			"Michell Dunkelberger",
			"Merissa Krom",
			"Seema McAdams",
			"Kimberley Heilmann",
			"Adrienne McMath",
			"Dominick Harber",
			"Janett Solley",
			"Bev Dillow",
			"Ranee McKissick",
			"Yoko Ott",
			"Williams Shiflett",
			"Don Paez",
			"Deidra Stokely",
			"Jung Petrovich",
			"Launa Hyler",
		
		],
		fail: [
			"Eilene Tripoli",
			"Hermila Valerius",
			"Roderick Childress",
			"Ligia Pepe",
			"Melia Currie",
			"Julie Circle",
			"Vonnie Ryba",
			"Lilli Figeroa",
			"Clarice Raco",
			"Georgette Martinez",
			"Lakenya Kinlaw",
			"Cecile Strohm",
			"Loni Kozel",
			"Sanjuana Faison",
			"Tyson Mayhue",
			"Madie Holdren",
			"Lynetta Marcelino",
		]
	};
	
	
	self.flatNames = self.names.excel.concat(self.names.pass, self.names.fail).sort();
	
	self.studentScores = initScores();

	// This requires that everything be defined, so no "self." routines can be called.
	jumpToReport($routeParams.type, true);

	self.state = {
		show: 'Class',
		showText: 'Entire class',
		showTextTitle: 'Entire class',

		compare: 'None',

		section: 'All'
	};

	var textMap = {
		Student: 'Thompson, Alice\u25BE',
		Class: 'Entire class',
		None: '',
		Morning: 'Section: Morning\u25BE',
		Afternoon: 'Section: Afternoon\u25BE'
	};

//	PubSub.subscribe('filter1', function(ev, val){self.curStd = val});
	PubSub.subscribe('filter2', function(ev, val){self.curStudent = val});
	//=======================================================
	//=======================================================
	function calcPercent(fraction) {
		return Math.floor(fraction * 100);
	}
	
	//=======================================================
	//=======================================================
	function setActive(entry, parent)
	{
		self.activeReport = entry;

		self.reportTitle = parent.title + ' - ' + entry.text
	}
	this.setActive = setActive;
    
	function wtf() {
		console.log("Hello, world!");
	}
	//=======================================================
	//=======================================================
	function jumpToReport(id, noRoute)
	{
		var found = false;
		for (var i = 0, len = self.reports.length; i < len; i++)
		{
			_.forEach(self.reports[i].options, function(entry) {
				if (entry.id === id)
				{
					setActive(entry, self.reports[i]);
					self.reports[i].isOpen = true;
					found = true;

					if (!noRoute)
						$location.path('/graph/' + id, false);

					return false;
				}
			});

			if (found)
				break;
		}
	}
	this.jumpToReport = jumpToReport;

	//=======================================================
	//=======================================================
	this.gradeChange = function()
	{
		window.location.href = 'change';
	}

	//=======================================================
	//=======================================================
	this.compare = function(val)
	{
		self.state.compare = val;
		self.state.compareText = textMap[val];

		if (val === 'Student')
			self.state.compareText = 'McGee, Bubba\u25BE';

		self.state.compareTextTitle = self.state.compareText.replace(/(\u25BE|Section: )/g, '');
	}

	//=======================================================
	//=======================================================
	this.show = function(val)
	{
		self.state.show = val;
		self.state.showText = textMap[val];

		self.state.showTextTitle = self.state.showText.replace(/(\u25BE|Section: )/g, '');
	}

	//=======================================================
	//=======================================================
	this.section = function(val)
	{
		self.state.section = val;
	}

	//=======================================================
	//
	//=======================================================
	function getBar(idx)
	{
//		return '../images/mocks/bar' + idx + '.png';
		return 'images/mocks/bar' + idx + '.png';
	}

	//=======================================================
	//=======================================================
	this.barWidth = function(score, opts)
	{
		var width = score;

		// Support a large size
		if ((typeof opts === 'string' && opts === 'large') || (opts && opts.size && opts.size === 'large'))
			width *= 2.5;

		// Account for the border
		if (typeof opts === 'object' && opts.container)
			width += 2;

		return {width: width + 'px'};
	}

	//=======================================================
	//=======================================================
	this.averagePercent = function(correct, total)
	{
		return Math.round (correct / total * 100);
	}

	//=======================================================
	//=======================================================
	
	function randomScore()
	{
		var scores = [Math.floor(Math.random() * 22 + 5), 0];
		var temp = Math.round((scores[0] * 100) / 27);
		scores[1] = temp;
		return scores;
	}
	//=======================================================
	//
	//=======================================================
	this.truncName = function(str)
	{
		return truncName(str);
	}

	//=======================================================
	//
	//=======================================================
	function truncName(str)
	{
		var maxlen = 20;

		if (str.length <= maxlen)
			return str;

		return str.substring(0, maxlen-3) + '...';
	}

	//=======================================================
	//=======================================================
	this.showStds = function(str)
	{
		return true;

		var regex = /[0-9]/;
		return !regex.test(str);
	}

	//=======================================================
	//
	//=======================================================
	function initScores()
	{
		var out = {};
		_.forEach(self.flatNames, function(name) {
			var scores = randomScore();
			out[name] = {
				score: scores[0],
				percent: scores[1]
			}
		});
		return out;
	}

}]);

'use strict';

//===========================================================================================
//===========================================================================================
angular.module('grades')

.directive('navHeader', function() {

	return {
		restrict: 'E',
		scope: {},
		controller: 'NavCtrl',
		controllerAs: 'nav',
		templateUrl: 'Nav/nav-header.html',
		replace: true,
		bindTo: true
	};
})

//===========================================================================================
.controller('NavCtrl', ["$scope", "Problems", "State", "kbBootstrap", "PubSub", "$modal", "hotkeys", "$window", "CloudSave", function($scope, Problems, State, kbBootstrap, PubSub, $modal, hotkeys, $window, CloudSave) {

	var self = this;

	// This will need to be bootstrapped, since we don't know which items are applicable.
	var menuOptions = [
		{icon:'images/slidermenu/iconHomework.gif', text:'Assignments', act: function(){linkTo('/syllabus.php')}},
		{icon: 'images/slidermenu/iconGraphs.png', text: 'Grades', act: function(){linkTo('')}},
		{icon: 'images/slidermenu/iconAdmin.png', text: 'Admin', act: function(){linkTo('/admin.php')}},
		{icon: 'images/slidermenu/iconSettings.gif', text: 'Settings', act: function(){linkTo('/admin_admin_detail.php?user_id={$user}&page=edit')}},
		{icon: 'images/slidermenu/iconHelp.gif', text: 'Support', act: function(){linkTo('http://www.perfectionlearning.com/kinetic-support?pid={$pid}')}},
		{icon: 'images/slidermenu/iconLogout.gif', text: 'Logout', act: function(){linkTo('//" . KMATHDOTCOM . "/logout.php')}}
	];
	self.menuModel = {
		items: menuOptions,
		opened: false
	};

	hotkeys
		.bindTo($scope)
		.add({
			combo: 'alt+v',
			description: 'Display application version',
			callback: showVersion
		});

	State.set('pendFilter', false);

	self.pendCnt = Problems.pendingCount();
	self.totalCnt = Problems.count();

	PubSub.subscribe('status', setStatus, $scope);
	PubSub.subscribe('saveStart', saving, $scope);
	PubSub.subscribe('saveDone', savingDone, $scope);

	$window.onbeforeunload = navAway;		// This catches actual page changes, and not routes. That's what we want.

	//===========================================================================================
	// Navigation
	//===========================================================================================

	//=======================================================
	//=======================================================
	self.getClass = function(setting)
	{
		var disabled = '';
		if (setting && self.pendCnt === 0)
			disabled = ' disabled';

		if (State.get('pendFilter') == setting)
			return 'active btn-default' + disabled;
		else
			return 'btn-info' + disabled;
	}

	//=======================================================
	//=======================================================
	self.setFilter = function(setting)
	{
		State.set('pendFilter', setting);

		// Reset the scroll bar to the top (technically, just let the world know the filter has changed. Let the world do whatever it wants.)
		PubSub.publish('filter_change');
	}

	//=======================================================
	//=======================================================
	self.done = function()
	{
		var dest = kbBootstrap.doneLink;
//		linkTo(dest);
		window.location.href = dest;		// @FIXME/dg: Use linkTo, but we're temporarily disabling the slider menu
	}

	//=======================================================
	//=======================================================
	self.doneBtnClass = function()
	{
		return true;	//self.hasProblems() ? '' : 'disabled';
	}

	//=======================================================
	// The "Done" button will display "Done" or "Cancel", depending
	// on circumstances.
	//=======================================================
	self.doneBtnName = function()
	{
		return 'Done';
	}

	//=======================================================
	//
	//=======================================================
	function linkTo(dest)
	{
		return;
		window.location.href = dest;
	}

	//=======================================================
	// If we're in the middle of saving, don't let the user leave
	// without confirmation.
	//=======================================================
	function navAway()
	{
		if (!CloudSave.isIdle())
			return "Your changes haven't been saved yet.";

		return undefined;
	}

	//===========================================================================================
	// General Event Handlers
	//===========================================================================================

	//=======================================================
	//=======================================================
	self.openMenu = function()
	{
		self.menuModel.opened = true;
	}

	//=======================================================
	// Having HTML in here violates controller/view separation.
	// However, the HTML is so simple we can look the other way.
	// Make a version directive since we're reusing this in each
	// module!
	//=======================================================
	function showVersion()
	{
		// Don't open if it's already being displayed
		if (self.activeModals)
			return;

		// Create the modal and save the instance reference
		self.activeModals = $modal.open({
			template: '<div id="loadFailed">' + State.get('appName') + ' version ' + State.get('version') + '</div>',
		});

		// Monitor the 'result' promise, and remove the instance reference when it closes
		self.activeModals.result.then(versionClosed, versionClosed);
	}

	//=======================================================
	//=======================================================
	function versionClosed()
	{
		self.activeModals = null;
	}

	//=======================================================
	//=======================================================
	function saving()
	{
		self.isSaving = true;
	}

	//=======================================================
	//=======================================================
	function savingDone()
	{
		// Update the pending count on any change
		self.pendCnt = Problems.pendingCount();

		// UI
		setTimeout(clearSaved, 500);
	}

	//=======================================================
	//
	//=======================================================
	function clearSaved()
	{
		$scope.$apply(function() {
			self.isSaving = false;
			self.isSaved = false;
		});
	}

	//=======================================================
	//=======================================================
	function showLoading()
	{
		setStatus(null, {act: 'loading'});
	}

	//=======================================================
	//=======================================================
	function clearLoading()
	{
		setStatus(null, {act: 'clear'});
	}

	//=======================================================
	// Display any requested status updates
	//=======================================================
	function setStatus(event, status)
	{
		// Validation
		if (typeof status !== 'object' && typeof status !== 'string')
			return;

		if (typeof status === 'string')
			var msg = status;

		else if (status.act && status.act === 'clear')
			msg = '';
		else if (status.act && status.act === 'loading')
			msg = 'LOADING...';

		// Hurray for multiple anonymous functions. This is a mess!
		// Sometimes setStatus is called asynchronously, sometimes synchronously.
		// When called async., we need to use $apply. When sync., we can't use $apply (throws inprog error).
		// Force async mode with setTimeout, then use $apply because we have to in async mode.
		setTimeout(function() {
			$scope.$apply(function() {
				self.status = msg;
			});
		}, 0);
	}

	//=======================================================
	//=======================================================
	self.options = function()
	{
		$modal.open({
			template: '<img src="images/mocks/Prefs.png">',
			size: 'lg'
		});
	}

}]);

'use strict';

//===========================================================================================
// Packages many small requests, sending them off at a fixed period.
//
// Duplicate and obsolete requests are eliminated. This is a nice optimization, but it's not
// always desired. If the timing of the action matters, such as setting that gets toggled at
// key moments, this feature would be bad. It can either be disabled, or the client could
// ensure unique IDs.
//===========================================================================================
angular.module('action-service')

//=======================================================
//=======================================================
.service('CloudSave', ["PubSub", function(PubSub) {

	var savePeriod = 1000;		// Time, in milliseconds, between saves

	var pending = false;
	var transmitting = false;

	var pendingQueue = [];		// Queue being added to.
	var transmitQueue = [];		// Data currently being transmitted (retained in case of failure)

	// External routine that performs the actual save operation, typically a REST client front-end
	var commManager;

	// External function that gets called after successful saves
	var notifyStartHandler, notifyDoneHandler;

	//=======================================================
	// Initialize with an external save function.
	//=======================================================
	function init(comm, notifyStart, notifyDone)
	{
		commManager = comm;
		notifyStartHandler = notifyStart;
		notifyDoneHandler = notifyDone;

		pendingQueue = [];
		transmitQueue = [];
		pending = false;
		transmitting = false;
	}

	//=======================================================
	// API: Add an item to the queue
	//=======================================================
	function add(id, data)
	{
		// Add to the queue
		pendingQueue = addToQueue(id, data, pendingQueue);

		// Transmit, now if we haven't transmitted in a while.
		// Otherwise, queue it up and send it later.
		if (!pending)
			scheduleTransmission();
	}

	//=======================================================
	// Adds a single item to the queue, removing dupes first.
	//=======================================================
	function addToQueue(id, data, queue)
	{
		// Check for existing items to remove
		queue = _.reject(queue, function(entry){return entry.id === id});

		// Add the item to the end of the queue
		queue.push({
			id: id,
			data: data
		});

		return queue;
	}

	//=======================================================
	// Request a transmission at some point in the near future.
	//=======================================================
	function scheduleTransmission()
	{
		pending = true;
		setTimeout(notifyAndSave, 1000);
	}

	//=======================================================
	// It's time for an actual transmission.
	//=======================================================
	function notifyAndSave()
	{
		PubSub.publish('saveStart');
		doSave();
	}

	//=======================================================
	// It's time for an actual transmission.
	//=======================================================
	function doSave()
	{
		transmitting = true;

		// Transmit the current collection
		transmitQueue = pendingQueue;
		pendingQueue = [];

		var data = _.pluck(transmitQueue, 'data');
		notifyStartHandler && notifyStartHandler(data);

		commManager(data).then(saveSuccess, saveFailed);
	}

	//=======================================================
	// Save failed. Add failed items back onto the queue.
	//=======================================================
	function saveFailed(event)
	{
		// Combine the queues (pending items added to the end, but replace duplicates)
		for (var i = 0, len = pendingQueue.length; i < len; i++)
			transmitQueue = addToQueue(pendingQueue[i].id, pendingQueue[i].data, transmitQueue);

		pendingQueue = transmitQueue;	// Silly overhead for doSave()

		// Start a resend immediately
		doSave();
	}

	//=======================================================
	// The transmission was successful. Allow more requests.
	//=======================================================
	function saveSuccess(response)
	{
		// Empty the queue
		transmitQueue = [];

		// Notify interested parties
		notifyDoneHandler && notifyDoneHandler(response);

		// Flag to allow more requests
		transmitting = false;
		pending = false;
		PubSub.publish('saveDone');

		// If data is already queued, trigger a new transmission
		if (pendingQueue.length > 0)
			scheduleTransmission();
	}

	//=======================================================
	// API: Is a transmission currently underway?
	//=======================================================
	function isSaving()
	{
		return transmitting;
	}

	//=======================================================
	// API: Is the system completely at rest?
	// That means there are no current transmissions,
	// and nothing is queued for transmission.
	//=======================================================
	function isIdle()
	{
		return (transmitQueue.length === 0 && pendingQueue.length === 0);
	}

	//=======================================================
	// Public API
	//=======================================================
	return {
		init: init,
		add: add,
		isSaving: isSaving,
		isIdle: isIdle
	}
}]);

'use strict';

//===========================================================================================
//===========================================================================================
angular.module('comm-service')

//===========================================================================================
// Service to fetch and transmit data.
//
// This handles caching and provides a public API that isolates data transmission.
//
// A single API function may perform multiple REST calls to provide requested data, isolating
// complexity and the server REST interface.
//===========================================================================================
.service('Comm', ["$http", function($http) {

	var base = 'http://dgalarneau-hw-bachelor.kbooks.local/rest.php/';

	//=======================================================
	// Set the grade for a single problem
	//
	// Requires:
	//   Assignment ID (aid) -- pset_id
	//   Question ID (qid) -- psp_id
	//   User ID (uid) -- user_id
	//   grade: The new score
	//=======================================================
	function setGrade(list)
	{
		var data = list[0];

		//$app->put('/pset/:pset_id/:psp_id/user/:student_id/score', 'adjust_score' );
		var url = base + 'pset/' + data.aid + '/' + data.qid + '/user/' + data.uid + '/score';
		return $http.put(url, {score: data.grade});
	}

	//=======================================================
	// Public API
	//=======================================================
	return {
		setGrade: setGrade
	};

}]);

'use strict';

//===========================================================================================
// Graded Problems
//===========================================================================================
angular.module('grades')

//=======================================================
//=======================================================
.service('Problems', ["kbBootstrap", "PubSub", "Comm", "CloudSave", function(kbBootstrap, PubSub, Comm, CloudSave) {

	//----------------------------------------------------------------------------
	// Internal model
	//----------------------------------------------------------------------------
	// Translate server answer types to something more sane
	var ansMap = {
		Kinetic: 'equation',
		input: 'equation',
		Multiple: 'check',
		MultKinetic: 'freeInput',
		VTPGraph: 'graphPlot',
		graphConst: 'graphConst',	// No change
		'no input': 'paper',
		essay: 'essay',
		check: 'check',
		radio: 'radio'
	};

	// Functions to normalize submitted and stored answers
	var format = {
		equation: formatGenericA,
		freeInput: formatFreeA,
		check: formatMultChoice,
		radio: formatMultChoice,
		graphPlot: formatGenericA,
		graphConst: formatGraphConstA,
		essay: formatGenericA,
		paper: formatGenericA
	};

	// Answer types that only allow a single instance
	var singleQtyOnly = ['radio', 'check'];

	// qNum
	// pset_id, psp_id, user_id, first_name, last_name
	// prefix, question, qImg, qImgText, choices
	// graphequations, graphparms
	// answer, ansType,
	// points, maxPoints, tries, maxTries, ++isPending
	// given
	var probList = [];

	// mode, ++title
	var metaData = {};
	CloudSave.init(Comm.setGrade);

	//=======================================================
	// Perform bootstrapping -- why here? Where else would it go?
	//=======================================================
	init(kbBootstrap.gradebook.data, kbBootstrap.title);

	//=======================================================
	//
	//=======================================================
	function init(data, title)
	{
		// Do some formatting and conversion.
		_.each(data, function(src, idx) {

			var newProb = {
				id: idx,
				qNum: src.qNum || (idx+1),
				aid: src.pset_id,
				qid: src.psp_id,
				uid: src.user_id,
				uname: {first: src.first_name, last: src.last_name},

				prefix: src.prefix,
				q: src.question,
				choices: src.choices,
				qImg: src.qImg,
				qImgOverlay: src.qImgText,

				graph: {eqs: src.graphequations, axis: src.graphparms},	// Break this down better

				a: src.answer,
				ansType: ansMap[src.ansType],

				score: (src.status !== 'pending' ? parseFloat(src.points) : ''),
//				score: parseFloat(src.points),
				scoreMax: parseFloat(src.maxPoints),
				attempts: src.tries,
				attemptsMax: src.maxTries,
				attemptsLeft: src.maxTries - src.tries,
				status: src.status,
				isPending: src.status === 'pending',	// Shortcut

				submission: src.given || ''
			};

			adjustAttempts(newProb);
			cleanEquations(newProb);
			cleanAnswer(newProb);
			format[newProb.ansType] && format[newProb.ansType](newProb);

			probList.push(newProb);
		});

		// Now set metadata
		metaData.mode = setMode();
		metaData.title = title;
	}

//------------------------------------------------------------------------------
// Formatters
//------------------------------------------------------------------------------

	//=======================================================
	//
	//=======================================================
	function formatGenericA(prob)
	{
		prob.cleanA = prob.a;
		prob.cleanSub = prob.submission;
	}

	//=======================================================
	//
	//=======================================================
	function formatFreeA(prob)
	{
		prob.cleanA = stripFIAnswer(prob.a);
		prob.cleanSub = prob.submission;
	}

	//=======================================================
	//
	//=======================================================
	function formatMultChoice(prob)
	{
		prob.cleanA = _.cloneDeep(prob.choices);
		prob.cleanSub = _.cloneDeep(prob.choices);

		var correct = prob.a.split(',');
		var submits = prob.submission.split(',');

		for (var i = 0, len = prob.choices.length; i < len; i++)
		{
			if (correct.indexOf(prob.choices[i].id) !== -1)
			{
				prob.cleanA[i].check = true;
//				prob.cleanA[i].style = 'mcCorrectAns';
			}

			if (submits.indexOf(prob.choices[i].id) !== -1)
			{
				prob.cleanSub[i].check = true;
				prob.cleanSub[i].style = prob.cleanA[i].check ? 'mcCorrectSub' : 'mcWrongSub';
			}
		}
	}

	//=======================================================
	//
	//=======================================================
	function formatGraphConstA(prob)
	{
		prob.cleanA = prob.graph.eqs[0];

		var type = prob.cleanA.split('=')[0];

		prob.cleanSub = type + '=' + prob.submission;
	}

	//=======================================================
	//
	//=======================================================
	function stripFIAnswer(mml)
	{
		var ansList = [];
		var regex = /<maction[^>]*>(<mtext>|<mn[^>]*>)*(.+?)(<\/mtext>|<\/mn>)*<\/maction>/g;

		// replace seems like the wrong choice. We just want to search. But multiple sets of parens means we'd have to prune out most of the results.
		mml.replace(regex, function(full, opener, val, closer) {
			ansList.push(val);	// Save the part we care about.
			return full;			// Return without changes. Clumsy!
		});

		return ansList.join(',');
	}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

	//=======================================================
	//
	//=======================================================
	function adjustAttempts(prob)
	{
		var singleAttempt = ['paper', 'essay', 'check', 'radio'];
		if (singleAttempt.indexOf(prob.ansType) !== -1)
			prob.attemptsMax = 1;

		if (prob.attempts > prob.attemptsMax)
		{
			prob.attempts = prob.attemptsMax;
			prob.attemptsLeft = 0;
		}
	}

	//=======================================================
	// Determines to mode we're in: Multiple students, or multiple problems
	//=======================================================
	function setMode()
	{
		// If there's only one problem, it could go either way. Just pick one.
		// multiProblem looks better, so that's our default.
		if (probList.length < 2)
			return 'multiProblem';

		// If the first 2 problems are for the same user, assume they all are.
		if (probList[0].uid === probList[1].uid)
			return 'multiProblem';

		return 'multiStudent';
	}

//------------------------------------------------------------------------------
// These are a direct cut-and-paste from the Assignments problem model.
// Either the model needs to be shared (probably bad), or this functionality
// needs to be moved to a service!
//------------------------------------------------------------------------------

	//=======================================================
	//
	//=======================================================
	function cleanEquations(prob)
	{
		prob.q = cleanMathML(prob.q);
		prob.a = cleanMathML(prob.a);

		for (var i = 0; i < (prob.choices && prob.choices.length); i++)
			prob.choices[i].a = cleanMathML(prob.choices[i].a);
	}

	//=======================================================
	// @FIXME/dg: This is causing issues in tags with hyphens.
	// Clean up text nodes only.
	//=======================================================
	function cleanMathML(str)
	{
		if (str)
			return str.replace(/-/g, '&#8722;');

		return '';
	}

	//=======================================================
	//
	//=======================================================
	function cleanAnswer(prob)
	{
		if (prob.ansType === 'equation')
		{
			// Split off prefixes and suffixes
			var split = splitEqAnswer(prob.a);
			prob.a = split.a;
			prob.ansPrefix = split.pre && replaceSpaces(split.pre);
			prob.ansSuffix = split.post && replaceSpaces(split.post);

			// Convert AND and OR symbols to text
			var fixAnd = /<mo>(\u2227|&#x2227;|&#8743;)<\/mo>/g;
			var fixOr = /<mo>(\u2228|&#x2228;|&#8744;)<\/mo>/g;
			prob.a = prob.a.replace(fixAnd, '<mtext>&nbsp;and&nbsp;</mtext>');
			prob.a = prob.a.replace(fixOr, '<mtext>&nbsp;or&nbsp;</mtext>');
		}
	}

	//=======================================================
	//=======================================================
	function splitEqAnswer(str)
	{
		str = str.trim();

		if (typeof(str) !== 'string')
			return {a: str};

		var open = findAll('<outside>', str);
		var close = findAll('</outside>', str);

		var errString = 'Prefix/Suffix error!';

		// Tag mismatch or too many tags
		if ((open.length !== close.length) || open.length > 2)
			return {a: errString};

		// No outside tags -- most common occurrence
		if (!open.length)
			return {a: str};

		var outOpen = "<outside>";
		var outClose = "</outside>";

		if (open[0] === 0)
		{
			var pre = str.substring(open[0] + outOpen.length, close[0]);
			open.shift();
			close.shift();
		}

		if (close.length && (close[0] === str.length - outClose.length))
		{
			var post = str.substring(open[0] + outOpen.length, str.length - outClose.length);
			open.shift();
			close.shift();
		}

		// Check for tags not at the start or end of the string
		if (open.length)
			return {a: errString};

		// Strip all outside tags
		var regex = /<outside>.*?<\/outside>/g;
		str = str.replace(regex, '');

		return {
			a: str.trim(),
			pre: pre,
			post: post
		};
	}

	//=======================================================
	// Poor man's XML-safe string replacement
	// This is seriously inadequate, but may be
	// just crazy enough to work.
	//
	// It's likely to cause issues.
	//=======================================================
	function replaceSpaces(str)
	{
		if (str[0] === ' ')
			str = '\u00A0' + str;;
		if (_.endsWith(str, ' '))
			str += '\u00A0';

		return str;
	}

	//=======================================================
	// Find all instances of a substring within a string.
	// The return value is an array of indices.
	//=======================================================
	function findAll(needle, haystack)
	{
		var out = [];
		var idx = -1;

		while (true)
		{
			idx = haystack.indexOf(needle, idx+1);

			if (idx === -1)
				break;

			out.push(idx);
		}

		return out;
	}

	//=======================================================
	// Look up a problem by ID
	//=======================================================
	function findProblem(id)
	{
		for (var i = 0, len = probList.length; i < len; i++)
		{
			if (probList[i].id === id)
				return probList[i];
		}

		return null;
	}

	//=======================================================
	// Updates the status. It can't set the pending status, because
	// there is no way to know.
	//=======================================================
	function getStatus(prob)
	{
		if (prob.score > 0)
			return 'correct';

		if (prob.attempts >= prob.attemptsMax)
			return 'incorrect';

		return 'new';
	}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

	//=======================================================
	//
	//=======================================================
	function get()
	{
		return angular.copy(probList);
	}

	//=======================================================
	//
	//=======================================================
	function pendingCount()
	{
		var cnt = 0;

		for (var i = 0, len = probList.length; i < len; i++)
		{
			if (probList[i].isPending)
				cnt++;
		}

		return cnt;
	}

	//=======================================================
	// Returns the total number of problems
	//=======================================================
	function count()
	{
		return probList.length;
	}

	//=======================================================
	// Modifies the score for a single problem
	// Updates the status of the problem based on the result.
	//=======================================================
	function setPoints(id, pts)
	{
		// Find the problems
		var prob = findProblem(id);
		if (!prob)
			return null;

		// Ensure something is actually changing.
		// If the problem was pending, any change is worth noting.
		if (prob.score === pts && !prob.isPending)
			return null;

		// Set the new score
		prob.score = pts;

		// Update various other fields
		if (pts <= 0)
		{
			prob.attempts = prob.attemptsMax;	// This marks the problem as incorrect. Unfortunately, we lose the proper count.
			prob.attemptsLeft = 0;
		}

		prob.isPending = false;
		prob.status = getStatus(prob);	// Since we set the attempts above, it's impossible for this to be "new" (or "pending", for other reasons)

		// Initiate a background save
		CloudSave.add('gradeChange', {
			aid: prob.aid,
			qid: prob.qid,
			uid: prob.uid,
			grade: pts
		});

		// Return the new problem instance to the client so they don't have to do all the same calculations
		return angular.copy(prob);
	}

	//=======================================================
	// Returns the page's mode
	//=======================================================
	function getMode()
	{
		return metaData.mode;
	}

	//=======================================================
	//
	//=======================================================
	function getTitle()
	{
		return metaData.title;
	}

	//=======================================================
	// Public API
	//=======================================================
	return {
		get: get,
		pendingCount: pendingCount,
		count: count,
		setPoints: setPoints,

		mode: getMode,
		title: getTitle,
	};

}]);

'use strict';

//===========================================================================================
// The simplest persistent state possible
//
// State is currently being used for two different things:
//   1) App-wide global variables (option settings, etc.)
//   2) Constants
//
// The constants should probably be replaced by a .constant provider. Technically, they are
// part of the global variables needed everywhere. However, their read-only nature and
// separate source suggests they be separated from the rest of State.
//===========================================================================================
angular.module('state-service', ['pubsub-service'])

//=======================================================
//=======================================================
.service('State', ["PubSub", function(PubSub) {

	var state = {

		// Application Version
		appName: 'Grades',
		version: '0.1.1'
	};

	return {

		//=======================================================
		//=======================================================
		get: function(key) {
			return state[key];
		},

		//=======================================================
		//=======================================================
		set: function(key, value) {
			if (state[key] !== value)
			{
				state[key] = value;
				PubSub.publish('StateChange:' + key, value);		// State change notification
			}
		}
	};

}]);

'use strict';

//===========================================================================================
// Performs MathJax conversion on request (was automatic, but that was TOO SLOW)
//===========================================================================================
angular.module('problemType')

.directive('freeInput', function() {

	// Searches for free input boxes
	// Tags inside the <maction> can be either <mtext> if there's no VTP inside, or <mn> if the
	// value is VTPed. That is weird and inconsistent. We probably want <mn> in all cases for
	// proper display.
	var regex = /<maction[^>]*>(<mtext>|<mn[^>]*>)*(.+?)(<\/mtext>|<\/mn>)*<\/maction>/g;

	// Replacement when we don't want to display the answer
	var replaceHidden = '<menclose class="placeholder" notation="box"><mspace height="18px" width="40px" /></menclose>';

	// Show the answer when there are multiple input boxes
	// @FIXME/dg: Padding added for grade change only. Reintegrate with Assignment's freeInput.js with a config block.
	var replaceVisibleMany = '<menclose notation="box"><mpadded width="+4px" height="+2px" depth="+2px"><mn>$2</mn></mpadded></menclose>';
	var replaceWithInject = ['<menclose notation="box"><mpadded width="+4px" height="+2px" depth="+2px"><mn>','</mn></mpadded></menclose>'];

	// Show the answer when there is one input boxes -- drop the surrounding box
	var replaceVisibleOne =  '<mn>$2</mn>';


	//=======================================================
	//=======================================================
	function formatHidden(string)
	{
		return string.replace(regex, replaceHidden);
	}

	//=======================================================
	//=======================================================
	function formatVisible(string, answers)
	{
		// Find out how many input boxes there are
		var match = string.match(regex);

		// @FIXME/dg: Always show the box for grade change only. Reintegrate with Assignment's freeInput.js with a config block.
		if (!answers)
			return string.replace(regex, replaceVisibleMany);
		else
		{
			var ansList = answers.split(',');

			return string.replace(regex, function(list) {
				return replaceWithInject[0] + ansList.shift() + replaceWithInject[1];
			});
		}
	}

	//=======================================================
	//
	//=======================================================
	function link(scope, element, attrs)
	{
		if (attrs.fiMode === 'hidden')
			var output = formatHidden(scope.model);
		else
			var output = formatVisible(scope.model, scope.answers);

		element.html(output);
	}

	//=======================================================
	//=======================================================
	return {
		restrict: 'E',

		scope: {
			model: '=fiData',
			answers: '=fiAnswers'
		},

		link: link
	};
})

'use strict';

//===========================================================================================
// Performs MathJax conversion on request (was automatic, but that was TOO SLOW)
//===========================================================================================
angular.module('problemType')

.directive('graphConst', function() {

	//=======================================================
	// Combine certain types into a metatype to keep the
	// graphTypes list clean and compact.
	//=======================================================
	var graphTypeMap = {
		hyperbolaxpos: 'hyperbola',
		hyperbolaypos: 'hyperbola',
		parabolax2: 'parabola',
		parabolay2: 'parabola',
	}

	//=======================================================
	//=======================================================
	var graphTypes = {
		point: {
			params: ['x', 'y'],	// Names of fields to be entered by the student in graphConst questions (in the same order as the database)
			plot: 1		// Number of points required to be plotted in graphPlot questions
		},

		line: {
			params: ['Slope (m)', 'y intercept (b)'],
			plot: 3
		},

		circle: {
			params: ['Center x', 'Center y', 'Radius'],
			plot: 4
		},

		ellipse: {
			params: ['h', 'k', 'a', 'b'],
			plot: 4
		},

		hyperbola: {
			params: ['h', 'k', 'a', 'b'],
			plot: 4
		},

		parabola: {
			params: ['h', 'k', 'p'],
			plot: 4
		},
	}

	//=======================================================
	//=======================================================
	function inputCnt(type)
	{
		// Convert to a metatype if one is available
		if (graphTypeMap[type])
			type = graphTypeMap[type];

		if (graphTypes[type])
			return graphTypes[type].plot;

		return 1;		// Unknown type. We need a default.
	}

	//=======================================================
	//=======================================================
	function getParams(type)
	{
		// Convert to a metatype if one is available
		if (graphTypeMap[type])
			type = graphTypeMap[type];

		if (graphTypes[type])
			return graphTypes[type].params;

		return ['Unknown'];		// Unknown type. Try to make it obvious.
	}

	//=======================================================
	// Converts a string graph definition to an object
	//=======================================================
	function graphStrToObj(string)
	{
		if (!string || typeof(string) !== 'string' || string.indexOf('=') === -1)
			return {type: 'unknown'};

		var eqIdx = string.indexOf('=');
		var type = string.slice(0, eqIdx).toLowerCase();
		var params = string.slice(eqIdx+1);
		if (params)
			var paramList = params.split(',');

		return {type:type, params: paramList};
	}

	//=======================================================
	//
	//=======================================================
	function link(scope, element, attrs)
	{
		// Convert answer string into object
		var obj = graphStrToObj(scope.answers);

		var paramList = getParams(obj.type);
		var ansList = graphStrToObj(scope.answers);

		// Interleave the parameters and supplied answers
		scope.model = [];
		_.forEach(paramList, function(val) {
			scope.model.push({
				label: val,
				value: parseFloat(ansList.params.shift())
			});
		});
	}

	//=======================================================
	// Configuration Block
	//=======================================================
	return {
		restrict: 'E',

		scope: {
			answers: '=gcAnswers'
		},

		link: link,
		templateUrl: 'problemTypes/graphConst.html'
	};
})

'use strict';

//===========================================================================================
// Performs MathJax conversion on request (was automatic, but that was TOO SLOW)
//===========================================================================================
angular.module('problemType')

.directive('problemType', function() {

	var templatePath = 'problemTypes/';

	var map = {
		freeInput: {
			q: 'freeInputQ.html',
			a: 'freeInputA.html',
		},

		equation: {
			q: 'equationQ.html',
			a: 'equationA.html',
		},

		check: {
			q: 'multChoiceQ.html',
			a: 'multChoiceA.html',
		},

		radio: {
			q: 'multChoiceQ.html',
			a: 'multChoiceA.html',
		},

		paper: {
			q: 'essayQ.html',
			a: 'simpleA.html',
		},

		essay: {
			q: 'essayQ.html',
			a: 'simpleA.html',
		},

		graphPlot: {
			q: 'simpleQ.html',
			a: 'graphPlotA.html',
		},

		graphConst: {
			q: 'graphConstQ.html',
			a: 'graphConstA.html',
		}
	};

	//=======================================================
	// Decide which template to use
	//=======================================================
	function getTemplate(scope, element, attrs)
	{
		var mode = attrs.ptMode;
		var type = scope.problem.ansType;

		return templatePath + map[type][mode];
	}

	//=======================================================
	//=======================================================
	return {
		restrict: 'E',
		scope: {
			problem: '=ngModel',
			answer: '=ptAnswer',
			correct: '=ptCorrect'
		},

		link: function(scope, element, attrs) {
			scope.getTemplate = function() {return getTemplate(scope, element, attrs)};
		},

		template: '<div ng-include="getTemplate()"></div>'
	};
});
'use strict';

//===========================================================================================
// Performs MathJax conversion on request (was automatic, but that was TOO SLOW)
//===========================================================================================
angular.module('problemType')

.directive('qimg', function() {

	//=======================================================
	//
	//=======================================================
	function link(scope, element, attrs)
	{
//		element.html(output);

		for (var i = 0, len = scope.model.length; i < len; i++)
		{
			scope.model[i].x = parseInt(scope.model[i].x, 10) + 3;
			scope.model[i].y = parseInt(scope.model[i].y, 10) + 3;
		}
	}

	//=======================================================
	//=======================================================
	return {
		restrict: 'E',

		scope: {
			model: '=qiData',
			src: '@ngSrc'
		},

		link: link,
		templateUrl: 'problemTypes/qImage.html'
	};
})

'use strict';

//===========================================================================================
// A Publish-Subscribe Event Manager
//
// Yanked from: https://gist.github.com/turtlemonvh/10686980/038e8b023f32b98325363513bf2a7245470eaf80
//===========================================================================================
angular.module('pubsub-service', [])

.factory('PubSub', ["$rootScope", function($rootScope) {

	var pubSub = {};

	//=======================================================
	// Publish an event, along with optional data
	//=======================================================
	pubSub.publish = function(msg, data)
	{
		if (typeof data === 'undefined')
			data = {};

		$rootScope.$emit(msg, data);
	};

	//=======================================================
	// Subscribe to an event
	//=======================================================
	pubSub.subscribe = function(msg, func, scope)
	{
		var unbind = $rootScope.$on(msg, func);

		if (scope)
			scope.$on('$destroy', unbind);
	};

	//=======================================================
	// PUBLIC API
	//=======================================================
	return pubSub;
}]);

'use strict';

//===========================================================================================
// Angular Directive For KB Math Graphs
//
// PARAMS:
//   width, height: in pixels
//   eqs: Array of equations (strings) to draw
//   axis: {x:[min,max,step], y:[min,max,step], skip: Int(def:1), usePiLabels: Boolean}
//
// Version 1.0. August 18th, 2014
//===========================================================================================
angular.module('kbGraph', [])

.directive('kbGraph', ["$document", function($document) {

	var self;

	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	var defaults = {

		width: 200,
		height: 200,

		eqs: [],
		axis: {
			x: [-100, 100, 10],
			y: [-100, 100, 10],
			skip: 1,
			usePiLabels: false
		}
	}

	//---------------------------------------------------------------------------------
	// Outer template. Since we have variables, we have to create it manually rather
	// than just returning it.
	//---------------------------------------------------------------------------------
	var template = '<canvas></canvas>';

	//---------------------------------------------------------------------------------
	// Global variables. These should almost certainly be members instead, but as long
	// as the plugin isn't interactive it shouldn't matter.
	//---------------------------------------------------------------------------------

	// graph
	var _xMax_lgc, _xMin_lgc, _xStep_lgc, xUpperBound;
	var _yMax_lgc, _yMin_lgc, _yStep_lgc;
	var _aryEq;
	var ctx;

	// graphGrid
	var Pi = '\u03c0';   //'&#960';
	var _negSignW = 2; // pixels

	var opts;
	var _xGrid, _yGrid;

	var style = {
		pointColor: 'red',
		pointTextColor: 'darkgreen',
		bgColor: 'white',
		gridColor: 'lightgray',
		axisColor: 'black',
		gridFont: "12px serif",
		gridFontColor: '#707070' // light gray
	};

	//=======================================================
	//
	//=======================================================
	function link(scope, element, attrs)
	{
		self = scope;

		scope.settings = _.extend({}, defaults, scope.options);

		// Add in answer points if they were supplied
		if (scope.answer)
			addAnswers(scope.answer);

		// Create the canvas element.
		element.html(template);
		scope.canvas = angular.element(element.children()[0]);

		scope.canvas.attr({
			'class': 'kbGraph',
			width: scope.settings.width,
			height: scope.settings.height
		});

		// Fill in the equations
		draw(scope.canvas);
	}

	//=======================================================
	//
	//=======================================================
	function addAnswers(ans)
	{
		var parsed = parseGraphPoints(ans);

		self.settings.eqs = self.settings.eqs.concat(parsed);
	}

	//=======================================================================
	// parseGraphPoints
	//=======================================================================
	function parseGraphPoints(strPoints)
	{
		var points = strPoints.split(",");
		var pointCount = points.length;

		var eq = [];
		for (var i = 0; i < pointCount; i+=2)
			eq.push("point=" + points[i] + "," + points[i+1]);

		return eq;
	}

//===========================================================================
// Directive configuration
//===========================================================================
	return {
		restrict: 'E',
		scope: {
			options: '=options',
			answer: '=kbAnswer'
		},

		link: link
	};


//===========================================================================================
// Private methods
//===========================================================================================

//===========================================================================================
// EQUATIONS AND GENERAL DRAWING
//===========================================================================================

	/*************************************************************************
	 This is the main function of the graph object
	 Input:
		_aryEq - arry of equations to draw
	*************************************************************************/
	function draw(canvas)
	{
		var eq = self.settings.eqs;
		if (eq.length < 1)
			return;

		_aryEq = eq.slice(0);		// Clone

		setAxis(canvas);
		gridDraw();
		drawEquations();
	}

	//---------------------------------------
	//---------------------------------------
	function setAxis(canvas)
	{
		var parms = self.settings.axis;

		// Set some default values if they are missing
		if (typeof parms.x === 'undefined')
			parms.x = [-10, 10, 1];
		if (typeof parms.y === 'undefined')
			parms.y = [-10, 10, 1];
		if (typeof parms.skip === 'undefined')
			parms.skip = 1;

		if (typeof parms.x === 'string')
			parms.x = parms.x.split(',');
		if (typeof parms.y === 'string')
			parms.y = parms.y.split(',');

		// Get the 2D context
		ctx = canvas[0].getContext("2d");

		gridCreate({
			xRange: parms.x,
			yRange: parms.y,
			labelSkip: parms.skip,
			usePiLabels: !!parms.usePiLabels
		});

		// index values for xRange, yRange to replace the magic numbers:
		var minIdx = 0, maxIdx = 1, StepSize = 2;

		_xMax_lgc = parms.x[maxIdx];
		_xMin_lgc = parms.x[minIdx];
		_xStep_lgc = parms.x[StepSize];

		xUpperBound = _xMax_lgc * 1.2; // make sure the graph draws to the border

		_yMax_lgc = parms.y[maxIdx];
		_yMin_lgc = parms.y[minIdx];
		_yStep_lgc = parms.y[StepSize];
	}

	//===================== draw equations ============================
	function appendColorFn(arg, color, drawFn)
	{
		drawFn.apply(this, arg.concat(color));
	}

	//=================================================
	//=================================================
	function initConicFn(arg, color)
	{
		arg.unshift(color); // Add elements at beginning of args array
		return initConics.apply(this, arg);
	}

	//=================================================
	//=================================================
	function drawEquations(newEq)
	{
		var drawAry;

		if (newEq)  drawAry = newEq;
		else
		{
			if (!_aryEq || _aryEq.length == 0)  return;
			drawAry = _aryEq;
		}

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);

		var strEq, colorEq, eqType, args, option;

		var eq = {
			line: { nParam:2,   fn: function(arg, color){ appendColorFn(arg, color, drawLineEqn) } },// 'line',

			circle: { nParam:3,   fn: function(arg, color){ appendColorFn(arg, color, drawCircle) } }, // 'circle',

			parabolax2: { nParam:3,   fn: function (arg, color)                              // 'parabolax2',
					{   var cnc = initConicFn(arg, color);

						// parabolaX2 h,k,p -- using formula 4p(y-k)=(x-h)^2
						// after translate to (h, k): y = +- x^2 / 4p
						cnc.xSlowThrink = 0;
						cnc.bDrawPositiveY = false;
						cnc.Eq = function(x, a) { return x*x / (4*a); }
						var p = arg[3], h = arg[1]; // color, h, k, a, b
						var xMaxY_lgc = Math.sqrt(4 * p * _yMax_lgc); // since 4py = x^2

						if (xMaxY_lgc < _xMax_lgc * 0.75)
						{
							cnc.xSlowThrink = xMaxY_lgc / 16;
							cnc.xfastThrink1 = xMaxY_lgc * 3 / 10;
							cnc.xfastThrink2 = xMaxY_lgc * 1 / 2;
							cnc.thrinkSlowFactor = 49/50; //
							cnc.thrinkFastFactor1 = 49/50;
							cnc.thrinkFastFactor2 = 49/50; //1/29; //17/49;
							cnc.xStart = 0;
							cnc.dX = -cnc.dX; // make it positive
							cnc.xCompare = function(x) { return x <= xUpperBound; }
							cnc.xChangeIncRate = function(x, threshold) { return x > threshold; }
						}

						arg.unshift(cnc);	// stuff extra param at beginning of arg
						drawConics.apply(this, arg); }
					},

			parabolay2: { nParam:3,   fn: function (arg, color)                              // 'parabolay2',
					{   var cnc = initConicFn(arg, color);

						// parabolaY2 h,k,p -- using formula 4p(x-h)=(y-k)^2
						// after translate to (h, k): y = +- sqrt(4px)
						cnc.xSlowThrink = cnc.xfastThrink2 / 4;
						cnc.bDrawNegativeX = false;

						var a = arg[3]; // color, h, k, a, b
						var Sign = mathSign(a); // sign of a
						cnc.xStart *= Sign;
						cnc.dX *= Sign; // keep going forever with this condition??
						if (Sign < 0)
							cnc.xCompare = function(x) { return x <= cnc.xVertex; };

						cnc.Eq = function(x, a) { return 2 * Math.sqrt( a * x ); }
						arg.unshift(cnc);	// stuff extra param at beginning of arg
						drawConics.apply(this, arg); }
					},

			ellipse: { nParam:4,   fn: function (arg, color)                              // 'ellipse',
					{   var cnc = initConicFn(arg, color);
						var a = arg[3]; // color, h, k, a, b
						cnc.xVertex = a;
						cnc.xVertexPx = gridXLgcLengthToPx(a);
						cnc.dotSize = 1;
						cnc.xSlowThrink = a / 2;
						cnc.xfastThrink1 = a * 17 / 20;
						cnc.xfastThrink2 = a * 79 / 80;
						cnc.thrinkSlowFactor = 19/20; //
						cnc.thrinkFastFactor1 = 18/19;
						cnc.thrinkFastFactor2 = 1/49;
						cnc.xStart = 0;
						cnc.dX = -cnc.dX; // make it positive
						cnc.xCompare = function(x) { return x <= Math.min(a, xUpperBound); };
						/**********************************************************************
							Draw an ellipse in the equation of (x-h)^2/a^2 + (y-k)^2/b^2 = 1;
							if h, k are zeros (we translate the system origin to h,k),
							the resulting equation will be     x^2/a^2 + y^2/b^2 = 1;

							therefore:   y = +- sqrt(1 - x^2/a^2) * b
						 **********************************************************************/
						cnc.Eq = function(x, a, b) { return Math.sqrt( 1 - x*x / (a*a) ) * b; }
						arg.unshift(cnc);	// stuff extra param at beginning of arg
						drawConics.apply(this, arg); }
					},

			hyperbolaxpos: { nParam:4,   fn: function (arg, color)                           // 'hyperbolaxpos',
					{   var cnc = initConicFn(arg, color);
						var a = arg[3], b = arg[4]; // color, h, k, a, b
						cnc.xVertex = a;
						cnc.xVertexPx = gridXLgcLengthToPx(a);

						cnc.xSlowThrink=  a * 1.42;

						cnc.thrinkFastFactor1= 19/20;
						cnc.thrinkFastFactor2= 13/19;

						// (x-h)^2/a^2 - (y-k)^2/b^2 = 1
						cnc.Eq = function(x, a, b) { return b * Math.sqrt( x*x / (a*a) - 1); }
//                                cnc.dotSize = 2;

						if (Math.abs(gridXLgcLengthToPx(a)) < Math.abs(gridXLgcLengthToPx(b)))
						{
							cnc.xSlowThrink = a * 2;
							cnc.xfastThrink1 = a * 1.5;
							cnc.xfastThrink2 = a * 0.9;
							cnc.thrinkSlowFactor = 39/40; //
							cnc.thrinkFastFactor1 = 29/30;
							cnc.thrinkFastFactor2 = 1/20; //1/29; //17/49;
						}

						arg.unshift(cnc);	// stuff extra param at beginning of arg
						drawConics.apply(this, arg); }
					},

			hyperbolaypos: { nParam:4,   fn: function (arg, color)                            // 'hyperbolaypos',
					{   var cnc = initConicFn(arg, color);
						// (y-k)^2/b^2 - (x-h)^2/a^2 = 1
						cnc.xSlowThrink = 0; // no shringk of dX
						cnc.Eq = function(x, a, b) { return b * Math.sqrt( x*x / (a*a) + 1); }
						arg.unshift(cnc);	// stuff extra param at beginning of arg
						drawConics.apply(this, arg); }
					},

			point: { nParam:2,   fn: function(arg, color, option)
						{   arg.unshift(color, option); // stuff extra param at beginning,
													// since label in the arg is an optional param
							drawDotEq.apply(this, arg); } }
		};

		for (var i=0; i < drawAry.length; i++)
		{
			strEq = drawAry[i];
			colorEq = drawAry[i].color || 'black';
			option = drawAry[i].option;

			// parse the parameters:
			strEq = strEq.replace(/\s*/g, "").toLowerCase();
			eqType = strEq.slice(0, strEq.indexOf('='));
			args = strEq.slice(strEq.indexOf('=')+1).split(','); //.concat(colorEq);

			// build parameters and then draw the equation:
			if ( typeof eq[eqType] !== 'undefined' )
			{
				// parse the parameters for current equation:
				for (var j=0; j < eq[eqType].nParam; j++) // string to number:
					if ( isNaN( args[j] = parseFloat(args[j]) ) )
						args[j] = 0;
						//console.log(eqType + " equation parameter has to be a number!");

				if (args.length >= eq[eqType].nParam)
				   eq[eqType].fn(args, colorEq, option);
				else
					continue;
					//console.log(eqType + " equation does not have right number of parameters!");
			}
			else
				console.log('Attempting to graph unknown type: ' + eqType);
		}
	}

	/************************************************************************************
	  Draw a straight line.
	  Input:
		x1, y1  - start point in pixel unit
		x2, y2  - end point in pixel unit
		width   - line width in pixel unit
		color   - line color
	************************************************************************************/
	function drawLine(x1, y1, x2, y2, width, color)
	{
		x1 = Math.round(x1);
		y1 = Math.round(y1);
		x2 = Math.round(x2);
		y2 = Math.round(y2);

		ctx.strokeStyle = color;
		ctx.lineWidth = width;
		ctx.beginPath();

		ctx.moveTo(x1, y1);
		ctx.lineTo(x2, y2);

		ctx.stroke();
		ctx.closePath();
	}

	/************************************************************************************
	************************************************************************************/
	function drawDotEq(color, option, x, y, label)
	{
		//pt_px = gridLgcPtToCanvasPt(x, y);
		gridDrawMouseLgcPt({x:x, y:y}, '', option, label);
	}

	/************************************************************************************
	  Take the input degree and return the translated radians.
	************************************************************************************/
	function degToRadian(deg)
	{
		return deg * Math.PI / 180;
	}

	/************************************************************************************
	  x, y             - position of the local object coordinates in pixel unit to
						 translate system origin to before rotation.
	  directionDegree  - rotation in degrees
	************************************************************************************/
	function transform(x, y, rotateDeg)
	{
		var directionInRad = degToRadian(rotateDeg);

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);

		// translate rotation center to the tip position:
		ctx.translate(x, y);
		ctx.rotate(directionInRad);
	}

	/************************************************************************************
	  x, y             - position of the arrow tip in pixel unit
	  directionDegree  - direction in degrees where the arrow points to
						 zero degree - arrow points to the right
	  length           - length of the arrow along the opposite direction of arrow tip
	************************************************************************************/
	function drawArrow(x, y, directionDegree, length, color)
	{
		var arrowSlentDegree = 5;
		var width = length * Math.tan(degToRadian(arrowSlentDegree));

		transform(x, y, directionDegree);

		// pretend the rotation degree is zero so we draw an arrow points to the right,
		// the trasform call above will take care the rotation effect.
		// since the screen origin has been translated to the tip of the arraw,
		// we need to use the local coordinate instead of original x,y:
		//
		drawLine(0, 0, -length, +width, 2, color);
		drawLine(0, 0, -length, -width, 2, color);
	}

	function drawDot(x, y, size)
	{
		ctx.fillRect(x-size/2, y-size/2, size, size);
	}

	function drawLineEqn(slope_lgc, intersect_lgc, color)
	{
		var ptScn1, ptScn2,
			x1 = _xMin_lgc,
			x2 = xUpperBound;

		var y1 = (x1 * slope_lgc + intersect_lgc),
			y2 = (x2 * slope_lgc + intersect_lgc);

		ptScn1 = gridLgcPtToCanvasPt(x1, y1);
		ptScn2 = gridLgcPtToCanvasPt(x2, y2);

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);

		drawLine(ptScn1.x, ptScn1.y, ptScn2.x, ptScn2.y, 1, color); //that.graphColor);
	}

	function drawCircle(x_lgc, y_lgc, r_lgc, color)
	{
		// Safety checks -- don't allow negative radius
		if (r_lgc < 0)
			return;

		var ptScn1, ptScn2,
			r_px = gridXLgcLengthToPx(r_lgc);

		ptScn1 = gridLgcPtToCanvasPt(x_lgc, y_lgc);

		ctx.beginPath();
		ctx.strokeStyle = color;
		ctx.lineWidth = 1;

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);

		ctx.arc(ptScn1.x, ptScn1.y, r_px, 0, Math.PI * 2, false);

		ctx.stroke();
		ctx.closePath();
	}

	/******************************************************************************
	 Input (all in logic unit and need to be converted to Canvas px unit):
		  a, b - x and y axis of the hyperbola.
		  h, k - x,y distances from the center of hyperbola to the origin
				 of x,y system.

	  Note: The cnc.Eq is to compute y according to x as if h, k are zeros;
	  x type:
				hyperbola equation is:   x^2 / a^2 - y^2 / b^2 = 1;

							therefore:   y = +- b * sqrt(x^2 / a^2 - 1)

	  y type:
				hyperbola equation is:   y^2 / b^2 - x^2 / a^2 = 1;

							therefore:   y = +- b * sqrt(x^2 / a^2 + 1)

	Algorithm:
		All the rendering is from the furthest opening points on the curve to the
	center point where the degenerate points are (eccept for eliipse, which is
	rendered from the center point to the furthest points on the x axist where the
	degenarate points are). The increment rate is divided into three phases -
	the closer to the degenate point, the finer the increment amount becomes.
	*****************************************************************************/
	function initConics(color, h, k, a, b)
	{
		var cnc = {
			dotSize:     2,
			hyperCenter: gridLgcPtToCanvasPt(h, k),
			xVertex:     0,
			xVertexPx:   0,
			bDrawNegativeX: true,
			bDrawPositiveY: true,

			xSlowThrink:  a *1.22,
			xfastThrink1: a * 1.182,
			xfastThrink2: a * 1.01,

			thrinkSlowFactor: 19/20, //
			thrinkFastFactor1: 18/19,
			thrinkFastFactor2: 1/49,

			xStart: xUpperBound + Math.abs(h),

			xCompare: function(x) { return x >= cnc.xVertex; },
			xChangeIncRate: function(x, threshold) { return x < threshold; }
		};

		cnc.dX = a / gridXLgcLengthToPx(a); // normalize the delta x

		// moving with increment of dX is not fine enough near y = 0:
		cnc.minDelta  = cnc.dX / 40;
		cnc.dX = -cnc.dX;

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		ctx.translate(cnc.hyperCenter.x, cnc.hyperCenter.y);

		ctx.fillStyle = color;
		return cnc;
	}

	/******************************************************************************
		Draw a conic type such as hyperbola in the equation (x type)
			(x-h)^2/a^2 - (y-k)^2/b^2 = 1
		or y type :
			(y-k)^2/b^2 - (x-h)^2/a^2 = 1

		Input (all in logic unit and need to be converted to Canvas px unit):
		  a, b - x and y axis of the hyperbola.
		  h, k - x,y distances from the center of hyperbola to the origin
				 of x,y system.

		algorithm:
		1. translate the system origin to h,k;
		2. compute y according to x as if h, k are zeros;

		therefore:   y = +- b * sqrt(x^2/a^2 - 1)
	 *****************************************************************************/
	function drawConics(cnc, color, h, k, a, b)
	{
		var x, y;
		var pt = {x:0, y:0};

		cnc.xSlowThrink *= _xStep_lgc;
		cnc.xfastThrink1 *= _xStep_lgc;
		cnc.xfastThrink2 *= _xStep_lgc;
		cnc.thrinkFactor = cnc.thrinkSlowFactor;

		// draw points at the degenrate spot:
		drawDot(cnc.xVertexPx, 0, cnc.dotSize);
		if (cnc.bDrawNegativeX)
			drawDot(-cnc.xVertexPx, 0, cnc.dotSize);

		// use logic x to calculate logic y,
		// then convert to canvas coords before drawing it:
		//
		for (x = cnc.xStart; //_xMax_lgc + Math.abs(h);
								cnc.xCompare(x); //x >= cnc.xVertex;
																x += cnc.dX) //xIncrement)
		{
			y = cnc.Eq(x, a, b); //b * Math.sqrt( x*x / (a*a) - 1);

			pt.x = gridXLgcLengthToPx(x);
			pt.y = gridYLgcLengthToPx(y);

			drawDot( pt.x,  -pt.y, cnc.dotSize);

			if (cnc.bDrawNegativeX)    //conicType != 'parabolay2')
				drawDot(-pt.x,  -pt.y, cnc.dotSize);

			if (cnc.bDrawPositiveY) //conicType != 'parabolax2')
			{
				drawDot( pt.x, pt.y, cnc.dotSize);

				if (cnc.bDrawNegativeX) //conicType != 'parabolay2')
					drawDot(-pt.x, pt.y, cnc.dotSize);
			}

			if (cnc.xChangeIncRate(x, cnc.xSlowThrink)) // dynamically change delta size toward y = 0:
			{
				if (cnc.xChangeIncRate(x, cnc.xfastThrink1))
				{
					if (cnc.xChangeIncRate(x, cnc.xfastThrink2))
						cnc.thrinkFactor = cnc.thrinkFastFactor2;
					else
						cnc.thrinkFactor = cnc.thrinkFastFactor1;
				}

				if (Math.abs(cnc.dX) > cnc.minDelta)
					cnc.dX *= cnc.thrinkFactor;
			}
		}

		// be nice to next function and reset transform:
		ctx.setTransform(1, 0, 0, 1, 0, 0);
	}

	//=======================================================
	// Math.sign shim. Math.sign is an experimental function
	// not available in all browsers
	//=======================================================
	function mathSign(value)
	{
		var number = +value;
		if (number === 0) return number;
		if (Number.isNaN(number)) return number;
		return number < 0 ? -1 : 1;
	}


//===========================================================================================
// GRID DRAWING
//===========================================================================================

	//=======================================================
	//=======================================================
	function gridCreate(obj)
	{
		opts = obj;

		gridInit();
		gridDraw();
	}

	//=======================================================
	//=======================================================
	function initAxis(max_lgc, min_lgc, step_lgc, length_px, Offset_px)
	{
		var range_lgc = Math.abs(max_lgc - min_lgc);
		var idealNumGrids = 20, idealStep_lgc,
			maxNumGrids = idealNumGrids, minNumGrids = 4;
		var maxNum = Math.max(Math.abs(max_lgc), Math.abs(min_lgc));
		var metrics = ctx.measureText("-");
		_negSignW = metrics.width; // pixels

		var grid =
		{
			max_lgc: max_lgc,
			min_lgc: min_lgc,
			step_lgc: step_lgc,
			nScale: 1,
			decimalPoints: 1,  // change this to alter the decimal precision of grid

			toStr: function(x)
			{
				if (typeof(x) == "string")
					x = parseFloat(x);
				var f = x.toFixed(this.decimalPoints);
				var n = x.toFixed(0);
				if (f - n)
					return f;
				return n;
			}
		}
		grid.maxDigits = countDigits(maxNum);

		var totalNumGrids = Math.round(range_lgc / step_lgc);

		if (totalNumGrids > maxNumGrids || totalNumGrids < minNumGrids)
		{
			if (range_lgc > idealNumGrids)
				idealStep_lgc = Math.floor(range_lgc / idealNumGrids); // ideal granuality = 20 grids
			else
			{
				idealNumGrids = 8;
				idealStep_lgc = Math.floor(range_lgc / idealNumGrids * 10) / 10;
			}

			grid.step_lgc = idealStep_lgc;
			totalNumGrids = Math.round(range_lgc / idealStep_lgc);
		}

		grid.maxSingleSideGrids = Math.floor(Math.max(Math.abs(max_lgc), Math.abs(min_lgc)) / grid.step_lgc);
//        grid.maxGrids = Math.floor(Math.abs(max_lgc) / grid.step_lgc);
		grid.minGrids = Math.floor(Math.abs(min_lgc) / grid.step_lgc);

		// float result for accurate gird origin computation:
		grid.step_px = ( length_px - Offset_px * 2 ) / totalNumGrids;

		// compute the grid origin:
		grid.origin = Math.round(length_px - Offset_px - Math.abs(max_lgc * grid.step_px / grid.step_lgc));

		// get the interger step size:
		grid.step_px = Math.round(grid.step_px);

//        grid.decimalFactor = 2 / grid.step_lgc; // half point precision
//        if (grid.decimalFactor < 1)
//            grid.decimalPoints = 0;

		return grid;
	}

	/************************************************************************************
	  Initialize a

	  Input:
		xRange: [min, max, step size]
		yRange: [min, max, step size]
	************************************************************************************/
	function gridInit()
	{
		// Compute grid steps:
		var xOffset = 6, // pixels, so the edge of the grid can display points
			yOffset = 6;

		// index values for xRange, yRange to replace the magic numbers:
		var minIdx = 0, maxIdx=1, StepSize=2;

		_xGrid = initAxis(opts.xRange[maxIdx], opts.xRange[minIdx], opts.xRange[StepSize],
						  self.settings.width, xOffset);
		// y logic system is positive up, but y canvas system is positive down:
		_yGrid = initAxis(opts.yRange[minIdx], opts.yRange[maxIdx], opts.yRange[StepSize],
						  self.settings.height, yOffset);
	}

	/************************************************************************************
	  Draw a x,y coordinate grid on Canvas

	  Input:
		gridColor: Grid line color
		axisColor: color for the x,y axis
	************************************************************************************/
	function gridDraw()
	{
		var axisWidth = 1,
			ticHalfLength = 2, // pixels
			arrawLength = Math.round( 0.5 * _xGrid.step_px ),
			yTicBotm = _yGrid.origin + ticHalfLength,
			yTicTop = _yGrid.origin - ticHalfLength;


		// Paint background:
		ctx.fillStyle = style.bgColor;
		ctx.fillRect (0, 0, self.settings.width, self.settings.height);

		var color = style.gridColor;
		var axisColor = style.axisColor;

		// draw grid:
		for (var i=1; i <= _xGrid.maxSingleSideGrids; i++)
		{
			for (var j=1; j <= _yGrid.maxSingleSideGrids; j++)
			{
				var y = j * _yGrid.step_px;

				drawLine(0, _yGrid.origin + y, self.settings.width, _yGrid.origin + y, axisWidth, color);

				if (j <= _yGrid.minGrids)
					drawLine(0, _yGrid.origin - y, self.settings.width, _yGrid.origin - y, axisWidth, color);
			}

			var x    = i * _xGrid.step_px;
			var x_px = _xGrid.origin + x;   // positive region of x:

			// draw short grid Tic on axis:
			drawLine(x_px, 0,         x_px, self.settings.height,   axisWidth, color);     // vertical grid lines
			drawLine(x_px, yTicBotm,  x_px, yTicTop,  axisWidth, axisColor); // tic bars

			if (i <= _xGrid.minGrids)
			{
				x_px = _xGrid.origin - x;   // negative region of x:
				drawLine(x_px, 0, x_px, self.settings.height, axisWidth, color);             // vertical grid lines
				drawLine(x_px, yTicBotm, x_px, yTicTop, axisWidth, axisColor); // tic bars
			}
		}

		printLabels(ticHalfLength, yTicBotm, yTicTop);

		// draw x axis:
		drawLine(0, _yGrid.origin, self.settings.width, _yGrid.origin, axisWidth, axisColor);

		// draw y axis:
		drawLine(_xGrid.origin, 0, _xGrid.origin, self.settings.height, axisWidth, axisColor);

		// draw arrows:
		drawArrow(self.settings.width-1, _yGrid.origin, 0, arrawLength * _xGrid.nScale, axisColor);  // on x-axis
		drawArrow(1, _yGrid.origin, 180, arrawLength * _xGrid.nScale, axisColor);  // on x-axis
		drawArrow(_xGrid.origin, 1, -90, arrawLength * _yGrid.nScale, axisColor);       // on y-axis
		drawArrow(_xGrid.origin, self.settings.height-1, 90, arrawLength * _yGrid.nScale, axisColor);       // on y-axis

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0); // clean up the transform after drawArrow
	}

	//=======================================================
	//=======================================================
	function isPrintableX(x, str)
	{
		var metrics = ctx.measureText(str);
		var halfStrW = metrics.width / 2;
		return ( x + halfStrW < self.settings.width && x - halfStrW > 0 )
	}

	//=======================================================
	//=======================================================
	function isPrintableY(y, str)
	{
		// since measureText doesn't provide height, this is a approximation:
		var metrics = ctx.measureText("M");
		var halfStrH = metrics.width;

		return ( y + halfStrH < self.settings.height && y - halfStrH > 0 )
	}

	/************************************************************************************
	  Print labels on x and y axis of the grid

	  Input:
		ticHalfLength: half length of the tics on the x axis.
		yTicBotm, yTicTop:  top and bottom Y positions of the tics on the x axis.
		gridFont: font for the labels
		gridFontColor: color for the labels
	************************************************************************************/
	function printLabels(ticHalfLength, yTicBotm, yTicTop)
	{
		var xTextHoriz, yTextHoriz, xTextVert, yTextVert,
			xGridNumber, yGridNumber, content,
			yClearance = 4, // pixels
			xDecimalPts = 0, yDecimalPts = 0,
			iSkipPosit = 0, iSkipNegat = 0,
			maxDenorm = 8;

		var skipCnt = opts.labelSkip || 0;
		var skipStep = _yGrid.step_lgc * (skipCnt + 1),
			skipStepDelta = skipStep - skipStep.toFixed();
		if (skipStepDelta)
			yDecimalPts = 1;

		if (_xGrid.step_lgc < 1)
			xDecimalPts = 2;

		ctx.font = style.gridFont;
		ctx.fillStyle = style.gridFontColor; // light gray for grid lines
		ctx.textAlign = "center";

		// Print grid numbers on x axis:
		yTextHoriz = yTicBotm - ticHalfLength*3;
		for (var i=1; i <= _xGrid.maxSingleSideGrids; i++)
		{
			// position of the label:
			var x = i * _xGrid.step_px;
			xTextHoriz = _xGrid.origin + x;

			// numbers on x-axis:
			xGridNumber = (i * _xGrid.step_lgc).toFixed(xDecimalPts);
			if (opts.usePiLabels)
				content = decToFracPiStr(xGridNumber, maxDenorm);
			else
				content = xGridNumber;

			if (i < _xGrid.maxSingleSideGrids || isPrintableX(xTextHoriz, content))
				iSkipPosit = printOneLabel(content, xTextHoriz, yTextHoriz, iSkipPosit, skipCnt);

			xTextHoriz = _xGrid.origin - x - _negSignW;

			if (isPrintableX(xTextHoriz, content))
				iSkipNegat = printOneLabel("-"+content, xTextHoriz, yTextHoriz, iSkipNegat, skipCnt);
		}

		// Print grid numbers on y axis:
		ctx.textAlign = "right";
		iSkipPosit = iSkipNegat = 0;
		xTextVert = _xGrid.origin -3; // 3 pixels to the left of y axis

		for (var j=1; j <= _yGrid.maxSingleSideGrids; j++)
		{
			// numbers on y-axis:
			yGridNumber = (j * _yGrid.step_lgc).toFixed(yDecimalPts);

			// position of the label:
			var y = j * _yGrid.step_px;
			yTextVert = _yGrid.origin - y + yClearance;

			if (isPrintableY(yTextVert, yGridNumber))
				iSkipPosit = printOneLabel(yGridNumber, xTextVert, yTextVert, iSkipPosit, skipCnt);

			// logic y is positive up, while canvas y is positive down:
			yTextVert = _yGrid.origin + y + yClearance;
			if (isPrintableY(yTextVert, yGridNumber))
				iSkipNegat = printOneLabel("-"+yGridNumber, xTextVert, yTextVert, iSkipNegat, skipCnt);
		}
	}

	//=======================================================
	//=======================================================
	function printOneLabel(content, x, y, iSkip, skipCnt)
	{
		if (iSkip == skipCnt)
		{
			ctx.fillText(content, x, y);
			iSkip = 0;
		}
		else
			iSkip++;
		return iSkip;
	}

	/************************************************************************************
	 Convert a decimal number to string of a Pi factored fraction number.
	 Input:
		dec         - the decimal number to be converted,
		maxDenom    - optional
					  the max denormitor of the conversion precision, default is 16

	 Return:
		xFrac.upper - upper part of the factored fraction
		xFrac.lower - lower part of the factored fraction

	 example:       xDec = 1.57;  maxDenorm = 8;
					return: xFrac.upper = 1; xFrac.lower = 2;    (i.e. 1.57 = 1/2 Pi)
	************************************************************************************/
	function decToFracPiStr(dec, maxDenorm)
	{
		var numPi = 3.14;
		var str = Pi;

		xFrac = decToFrac(dec, numPi, maxDenorm);
		if (xFrac.upper < 0)
			str = "-" + Pi;

		if (xFrac.lower != xFrac.upper)
		{
			if (Math.abs(xFrac.upper) > 1)
				str = xFrac.upper + Pi;

			if (xFrac.lower > 1)
				str += '/' + xFrac.lower;
		}
		return str;
	}

	/************************************************************************************
	 Convert a decimal number to a factored fraction number.
	 Input:
		xDec        - the decimal number to be converted,
		comDenorm   - optional
					  the common denormitor used for factoring, most often this = Pi.
					  If just want to convert a decimal number to fraction number,
					  make this equal to 1, which is default.
		maxDenom    - optional
					  the max denormitor of the conversion precision, default is 16

	 Return:
		xFrac.upper - upper part of the factored fraction
		xFrac.lower - lower part of the factored fraction

	 example:       xDec = 1.57; comDenorm = 3.14; maxDenorm = 8;
					return: xFrac.upper = 1; xFrac.lower = 2;    (i.e. 1.57 = 1/2 Pi)
	************************************************************************************/
	function decToFrac(xDec, comDenorm, maxDenorm)
	{
		var xFrac = {}, factor = 1,
			iMaxDenorm = 16, iComDenorm = 1;

		if (comDenorm) iComDenorm = comDenorm;
		if (maxDenorm) iMaxDenorm = maxDenorm;
/*
		for (var i = 1; i < iMaxDenorm; i++)
		{
			for (var j=1; j<=i; j++)
				if ( (i * xDec) % (j * comDenorm) == 0) // found factor
					return factorOut(j, i);
		}
 */
		// the maxDenorm is not enough, so we round it up:
		xFrac.upper = Math.round(iMaxDenorm * xDec / comDenorm );
		xFrac.lower = iMaxDenorm;
		factorOut(xFrac);
		return xFrac;
	}

	function factorOut(frac) //upper, lower)
	{
		if (frac.upper === 1)
			return;

		for (var i=2; i <= frac.lower; i++)
		{
			if (frac.upper % i == 0 && frac.lower % i == 0)
			{
				frac.upper /= i;
				frac.lower /= i;
				factorOut(frac); // start again until no longer can be factored
			}
		}
	}

/*************************** public interface: ******************************************/

	function gridLgcPtToCanvasPt(xLgc, yLgc)
	{
		var ptScrn = {};
		ptScrn.x = xLgc * _xGrid.step_px / _xGrid.step_lgc + _xGrid.origin;
		ptScrn.y = -yLgc * _yGrid.step_px / _yGrid.step_lgc + _yGrid.origin;

		return ptScrn;
	}

	function gridXLgcLengthToPx(r_lgc)
	{
		return r_lgc * _xGrid.step_px / _xGrid.step_lgc;
	}

	function gridYLgcLengthToPx(r_lgc)
	{
		return r_lgc * _yGrid.step_px / _yGrid.step_lgc;
	}

	/**************************************************************************
	 The position of the mouse point is adjusted according to the round up
	 logical point. This is to make it easier for the user to click the
	 previous point displayed on the screen so the position doesn't have to be
	 exact.
	 Input:
		msePt_lgc   - x,y position of the mouse in logic unit
		color       - color of the mouse point, dashline, label
		dispPosition - if x,y position should be displayed
		label       - if a string lable should be printed in stead of x,y position
	**************************************************************************/
	function gridDrawMouseLgcPt(msePt_lgc, color, dispPosition, label)
	{
		var rCircle = 2; //pixels
		var yLableClearance = 16; // pixels

		if (!color)
			color = style.pointColor;

		// set transform matrix to identity:
		ctx.setTransform(1, 0, 0, 1, 0, 0);

		var msePt_px  = gridLgcPtToCanvasPt(msePt_lgc.x, msePt_lgc.y);
		var xLable = msePt_px.x,
			yLable = msePt_px.y - rCircle * 3;

		// draw the dot:
		//ctx.beginPath();
		ctx.fillStyle = color;
		ctx.strokeStyle = color;
		ctx.textAlign = "center";
		ctx.beginPath();

		ctx.arc(msePt_px.x, msePt_px.y, rCircle, 0, Math.PI * 2, false);
		ctx.stroke();
		ctx.closePath();
		ctx.fill();

		// print the logical coordinates:
		var pt = {}
		pt.x = (msePt_lgc.x).toFixed(_xGrid.decimalPoints);
		pt.y = (msePt_lgc.y).toFixed(_yGrid.decimalPoints);

		var xStr = _xGrid.toStr(pt.x);
		if (opts.usePiLabels)
			xStr = decToFracPiStr(pt.x, 8);

		if (label)
			label = label.toUpperCase();
		else
		{
			if (dispPosition)
				label = '(' + xStr + ', ' + _xGrid.toStr(pt.y) + ')';
			else
				return; // work is done if no label
		}

		var metrics = ctx.measureText(label);
		var halfStrW = metrics.width / 2;

		// adjust position if the dot is near a border:
		if (msePt_px.x > self.settings.width - halfStrW)
			ctx.textAlign = "right";
		if (msePt_px.x < halfStrW)
			ctx.textAlign = "left";
		if (msePt_px.y < yLableClearance)
		{
			yLable = msePt_px.y + yLableClearance;
			if (!label) // label doesn't need to consider mouse cursor issue
			{
				if (msePt_px.x > that.w / 2)
				{
					ctx.textAlign = "right";
					xLable -= 6; // avoid the slanting down arrow handle
				}
				else
				{
					ctx.textAlign = "left";
					xLable += 12; // avoid the slanting down arrow handle
				}
			}
		}

		ctx.fillStyle = style.pointTextColor;
		ctx.fillText(label, xLable, yLable);
	}

	//=======================================================
	// Count the digits in a number
	//=======================================================
	function countDigits(num)
	{
		var digits = 0;

		if (num == 0)
			return 1;

		while (num > 0)
		{
			digits++;
			num = Math.floor(num / 10);
		}

		return digits;
	}

}]);
'use strict';

//===========================================================================================
// Performs MathJax conversion
//
// It was fully automatic, but that was TOO SLOW.
// Manual requests occasionally failed due to digest unpredictability.
// This method is mostly automatic, but it can only jax items inside ngRepeat blocks.
// That works for now, but in general is a poor limitation.
//===========================================================================================
angular.module('mathJax', [])

.directive('mathjax', function() {

	return {
		restrict: 'A',
		link: function(scope, element, attrs) {

			//=======================================================
			// Display the element after Jax conversion is complete
			//=======================================================
			function show()
			{
				element.css('visibility', 'visible');
			}

			//=======================================================
			//=======================================================
			scope.$on('jaxIt', function () {

				// Hide the element during Jax conversion
				element.css('visibility', 'hidden');

				// We need to wait for the next digest cycle
				setTimeout(function() {
					MathJax.Hub.Queue(['Typeset', MathJax.Hub, element[0], show]);
				}, 0);

            });
		}
	};
})

//=======================================================
// This must be included in an ngRepeat block to cause
// jaxing to occur.
//=======================================================
.directive('mathjaxRepeat', function() {

	return {
		restrict: 'A',

		link: function(scope, element, attrs) {
			if (scope.$last)
				scope.$emit('jaxIt');
		}
	};
});

'use strict';

//===========================================================================================
// Resets the scroll position of an element on request.
//
// When switching views or applying filters/data changes to ngRepeats, the scroll position
// will stay the same by default. That is almost always undesirable.
//
// This solution comes from:
//   http://stackoverflow.com/questions/24040985/scroll-to-top-of-div-in-angularjs
//
// Modified to use PubSub instead of $scope broadcasts.
//
// USAGE:
//   Template: <div id="myList" scroll-to-top-when="items_changed">
//===========================================================================================
angular.module('ui.scrollToTopWhen', [])

.directive('scrollToTopWhen', ["PubSub", "$timeout", function(PubSub, $timeout) {

	//=======================================================
	//=======================================================
	function link (scope, element, attrs)
	{
		PubSub.subscribe(attrs.scrollToTopWhen, function() {
			$timeout(function() {
				angular.element(element)[0].scrollTop = 0;
			});
		});
	}

	//=======================================================
	// Configuration Block
	//=======================================================
	return {
		restrict: 'A',
		link: link
	}
}]);
'use strict';

//===========================================================================================
// Slide-out menu
//===========================================================================================
angular.module('sliderMenu', [])

.directive('sliderMenu', ["$document", function($document) {

	var self;

	// Any of these can be overridden by the user on creation
	var defaults = {
		blurDelay: 400,		// Time until close when the mouse leaves (in ms)
		autoClose: 1200		// Time until close if the mouse never enters (in ms)
	};

	//--------------------
	var menuTemplatePre =
		'<div id="slidermenu">' +
			'<div>' +
				'<div id="sm_top"></div>' +
				'<div id="sm_top_right"></div>' +
			'</div>' +

			'<div id="sm_main_body">' +
				'<div id="sm_center">';

	var menuTemplatePost =
				'</div>' +
				'<div id="sm_right"></div>' +
			'</div>' +

			'<div>' +
				'<div id="sm_bottom"></div>' +
				'<div id="sm_bottom_right"></div>' +
			'</div>' +
		'</div>';

	//--------------------
	var lineTemplate =
		'<div id="menu_item_{{index}}" class="sliderMenuLine">' +
			'<img src="{{icon}}">' +
			'<span>{{text}}</span>' +
		'</div>';

	//=======================================================
	//
	//=======================================================
	function link(scope, element, attrs)
	{
		self = scope;

		scope.settings = _.extend({}, defaults, scope.options);

		// Init variables
		scope.menuState = 'out';

		var html = menuCreate(scope.model.items);
		element.html(html);
		scope.menuEl = angular.element(element.children()[0]);


		// Attach all of the events (line click, blur)
		scope.$watch('model.opened', menuOpen);
		attachEvents(scope.model);

		setSizes(element);
		positionMenu(scope.menuEl);
	}

	//=======================================================
	//
	//=======================================================
	function menuCreate(items)
	{
		var html = menuTemplatePre;

		_.each(items, function(val, idx) {
			html += resolveTemplate(lineTemplate, {
				icon: val.icon,
				text: val.text,
				index: idx
			});
		});

		html += menuTemplatePost;

		return html;
	}

	//=======================================================
	// Our own low-tech template system
	//=======================================================
	function resolveTemplate(template, vars)
	{
		var findVars = /\{\{(\w+)\}\}/g;

		var resolved = template.replace(findVars, function(all, param) {
			return vars[param];
		});

		return resolved;
	}

	//=======================================================
	// Properly size the edges to match the content
	//=======================================================
	function setSizes(el)
	{
		var doc = $document[0];

		var top = angular.element(doc.getElementById('sm_top'));
		var bottom = angular.element(doc.getElementById('sm_bottom'));
		var right = angular.element(doc.getElementById('sm_right'));

		var center = doc.getElementById('sm_center');
		var wd = center.clientWidth;
		var ht = center.clientHeight;

		top.css('width', wd + 'px');
		bottom.css('width', wd + 'px');
		right.css('height', ht + 'px');
	}

	//=======================================================
	// Place the menu off the left edge of the screen
	//=======================================================
	function positionMenu(el)
	{
		var body = $document[0].getElementById('sm_main_body');
		self.closePos = -body.clientWidth + 'px';

//		el.css('left', self.closePos);
		el.css({
			transform: 'translateX(' + self.closePos + ')',
			'-webkit-transform': 'translateX(' + self.closePos + ')',
			'-moz-transform': 'translateX(' + self.closePos + ')',
			'-ms-transform': 'translateX(' + self.closePos + ')',
		});
	}

	//=======================================================
	// Attach all of the events (line click, blur)
	//=======================================================
	function attachEvents()
	{
		self.menuEl.on('mouseenter', mouseEnter);
		self.menuEl.on('mouseleave', mouseLeave);

		var lines = self.menuEl[0].getElementsByClassName('sliderMenuLine');
		angular.element(lines).on('click', lineClick);
	}

//===========================================================================
// Actions
//===========================================================================

	//=======================================================
	// A request to activate the menu has occurred
	//=======================================================
	function menuOpen(newVal, oldVal, scope)
	{
		if (newVal === oldVal || !newVal)
			return;

//		scope.menuEl.css('left', 0);
		scope.menuEl.css({
			transform: 'translateX(0)',
			'-webkit-transform': 'translateX(0)',
			'-moz-transform': 'translateX(0)',
			'-ms-transform': 'translateX(0)',
		});

		scope.autoCloseTimeout = setTimeout(menuClose, scope.settings.autoClose);	// Close unless the mouse enters in time
	}

	//=======================================================
	//
	//=======================================================
	function menuClose()
	{
//		self.menuEl.css('left', self.closePos);
		self.menuEl.css({
			transform: 'translateX(' + self.closePos + ')',
			'-webkit-transform': 'translateX(' + self.closePos + ')',
			'-moz-transform': 'translateX(' + self.closePos + ')',
			'-ms-transform': 'translateX(' + self.closePos + ')',
		});

		self.$apply(function() {
			self.model.opened = false;
		});

		clearTimeout(self.autoCloseTimeout);
	}

	//=======================================================
	// High-level auto-close system
	//=======================================================
	function setActive()
	{
		clearTimeout(self.autoCloseTimeout);
	}

	//=======================================================
	//
	//=======================================================
	function lineClick(ev)
	{
		var idx = -1;
		var node = ev.currentTarget;
		while (node) {
			idx++;
			node = node.previousSibling;
		}

		var act = self.model.items[idx].act;
		act && act();
	}

//===========================================================================
// Hover system (this should be a separate self!)
//===========================================================================

	//=======================================================
	// Low-level mouseenter handler
	//=======================================================
	function mouseEnter()
	{
		// Don't do this if it's already in
		if (self.menuState === 'in')
			return;

		if (self.menuState === 'leaving')
		{
			clearTimeout(self.timeout);
			self.menuState = 'in';
		}
		else if (self.menuState === 'out')
			doEnter();		// Eliminated the entry delay. Not needed by this self.
	}

	//=======================================================
	// Low-level mouseleave handler
	//=======================================================
	function mouseLeave()
	{
//		self.hoverCount--;

		// If we're already out somehow, don't do anything
		if (self.menuState === 'out')
			return;

		if (self.menuState === 'in')
			leaving();
	}

	//=======================================================
	// Transitioning from in to out
	//=======================================================
	function leaving()
	{
		// A delay is requested.  Start the timeout.
		self.timeout = setTimeout(function() {doLeave()}, self.settings.blurDelay);
		self.menuState = 'leaving';
	}

	//=======================================================
	//
	//=======================================================
	function doEnter()
	{
		self.menuState = 'in';
		setActive();
	}

	//=======================================================
	//
	//=======================================================
	function doLeave()
	{
		// It's possible to be in multiple widgets at once.  It's not a "real" leave until
		// we've exited every widget.
//		if (self.hoverCount <= 0)
		{
			self.menuState = 'out';

			menuClose();
		}
	}

//===========================================================================
// Directive configuration
//===========================================================================
	return {
		restrict: 'E',
		scope: {
			options: '=options',
			model: '=ngModel'
		},

		link: link
	};
}]);

//# sourceMappingURL=data:application/json;base64,